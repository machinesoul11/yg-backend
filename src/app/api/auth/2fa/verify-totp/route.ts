/**
 * POST /api/auth/2fa/verify-totp
 * Verifies TOTP code from authenticator app for 2FA authentication
 * 
 * This endpoint validates the time-based one-time password from
 * an authenticator app and completes the authentication process if successful.
 */

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';
import { TwoFactorChallengeService } from '@/lib/services/auth/2fa-challenge.service';
import { TwilioSmsService } from '@/lib/services/sms/twilio.service';
import { EmailService } from '@/lib/services/email/email.service';
import { AccountLockoutService } from '@/lib/auth/account-lockout.service';
import { z } from 'zod';

// Initialize services
const smsService = new TwilioSmsService();
const emailService = new EmailService();
const lockoutService = new AccountLockoutService(prisma, emailService);
const challengeService = new TwoFactorChallengeService(
  prisma,
  smsService,
  emailService,
  lockoutService
);

// Request validation schema
const verifySchema = z.object({
  challengeToken: z.string(),
  code: z.string().length(6, 'Verification code must be 6 digits').regex(/^\d+$/, 'Code must contain only digits'),
});

/**
 * Helper to extract request context
 */
function getRequestContext(req: NextRequest) {
  return {
    ipAddress: req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown',
    userAgent: req.headers.get('user-agent') || 'unknown',
  };
}

export async function POST(req: NextRequest) {
  try {
    // Parse and validate request body
    const body = await req.json();
    const validation = verifySchema.safeParse(body);

    if (!validation.success) {
      return NextResponse.json(
        {
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: validation.error.issues,
          },
        },
        { status: 400 }
      );
    }

    const { challengeToken, code } = validation.data;
    const context = getRequestContext(req);

    // Verify TOTP code
    const result = await challengeService.verifyTotp(challengeToken, code, context);

    if (!result.success) {
      // Determine appropriate status code
      let statusCode = 401;
      if (result.error?.includes('expired')) statusCode = 410;
      if (result.error?.includes('Too many')) statusCode = 429;
      if (result.error?.includes('Maximum')) statusCode = 403;

      return NextResponse.json(
        {
          success: false,
          error: {
            code: 'VERIFICATION_FAILED',
            message: result.error,
            attemptsRemaining: result.attemptsRemaining,
            lockedUntil: result.lockedUntil?.toISOString(),
          },
        },
        { status: statusCode }
      );
    }

    // Success - authentication complete
    return NextResponse.json(
      {
        success: true,
        data: {
          message: 'Two-factor authentication successful',
          // Note: Session token should be generated by the auth system
          // This endpoint confirms 2FA, actual session creation happens in auth flow
        },
      },
      { status: 200 }
    );
  } catch (error) {
    console.error('[2FA Verify TOTP] Error:', error);

    return NextResponse.json(
      {
        success: false,
        error: {
          code: 'INTERNAL_SERVER_ERROR',
          message: 'Failed to verify authenticator code',
        },
      },
      { status: 500 }
    );
  }
}
