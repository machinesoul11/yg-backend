name: Database Migration - Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "CONFIRM" to proceed with production migration'
        required: true
        type: string

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "CONFIRM" ]; then
            echo "‚ùå Deployment cancelled - confirmation not provided"
            exit 1
          fi
          echo "‚úÖ Confirmation received"

  backup-database:
    name: Create Database Backup
    runs-on: ubuntu-latest
    needs: [validate-input]
    if: always() && (needs.validate-input.result == 'success' || github.event_name == 'release')
    environment: production
    
    steps:
      - name: Trigger Supabase backup
        run: |
          echo "üì¶ Creating database backup..."
          curl -X POST \
            "https://api.supabase.com/v1/projects/${{ secrets.SUPABASE_PROJECT_ID }}/database/backups" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/json"
          echo "‚úÖ Backup triggered"

      - name: Wait for backup completion
        run: |
          echo "‚è≥ Waiting 30 seconds for backup to complete..."
          sleep 30

  migrate-production:
    name: Apply Migrations to Production
    runs-on: ubuntu-latest
    needs: [backup-database]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run db:generate

      - name: Check pending migrations
        id: check-migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Checking migration status..."
          npm run db:migrate:status || echo "pending=true" >> $GITHUB_OUTPUT

      - name: Apply migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üöÄ Applying migrations to production..."
          npm run db:migrate:deploy
          echo "‚úÖ Migrations applied"

      - name: Verify migration success
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üîç Verifying database health..."
          npm run db:health
          echo "‚úÖ Health check passed"

      - name: Check migration status
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "üìä Final migration status:"
          npm run db:migrate:status

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: '‚úÖ PRODUCTION database migration completed successfully',
              attachments: [{
                color: 'good',
                text: `Release: ${process.env.GITHUB_REF}\nDeployed by: ${process.env.GITHUB_ACTOR}\n\nDatabase is ready for production deployment.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: 'üö® PRODUCTION database migration FAILED',
              attachments: [{
                color: 'danger',
                text: `Release: ${process.env.GITHUB_REF}\n\n‚ö†Ô∏è URGENT: Check GitHub Actions immediately and prepare for rollback if necessary.\n\nBackup was created before migration attempt.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-application:
    name: Deploy Application (Vercel)
    runs-on: ubuntu-latest
    needs: [migrate-production]
    if: success()
    environment: production
    
    steps:
      - name: Trigger Vercel deployment
        run: |
          echo "üöÄ Triggering Vercel production deployment..."
          # Vercel will automatically deploy on git push/merge
          # This step is informational only
          echo "‚úÖ Application deployment triggered via Vercel Git integration"

      - name: Notify deployment started
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: 'üöÄ Application deployment to production started',
              attachments: [{
                color: 'warning',
                text: 'Vercel is deploying the application. Monitor at https://vercel.com'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
