generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_POOLED")
  directUrl = env("DATABASE_URL")
}

model User {
  id                   String                     @id @default(cuid())
  email                String                     @unique
  name                 String?
  avatar               String?
  role                 UserRole                   @default(VIEWER)
  password_hash        String?
  email_verified       DateTime?
  deleted_at           DateTime?
  isActive             Boolean                    @default(true)
  locked_until         DateTime?
  failed_login_count   Int                        @default(0)
  last_failed_login    DateTime?
  lastLoginAt          DateTime?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  accounts             Account[]
  auditEvents          AuditEvent[]
  brand                Brand?
  creator              Creator?
  emailEvents          EmailEvent[]
  emailPreferences     EmailPreferences?
  emailTestAssignments EmailTestAssignment[]
  scheduledEmails      ScheduledEmail[]
  emailUnsubscribeLogs EmailUnsubscribeLog[]
  // Email campaigns
  campaignsCreated     EmailCampaign[]            @relation("CampaignCreatedBy")
  campaignRecipients   CampaignRecipient[]
  assetsCreated        IpAsset[]                  @relation("AssetCreator")
  assetsUpdated        IpAsset[]                  @relation("AssetUpdater")
  ownershipCreated     IpOwnership[]              @relation("IpOwnershipCreatedBy")
  ownershipUpdated     IpOwnership[]              @relation("IpOwnershipUpdatedBy")
  passwordResetTokens  PasswordResetToken[]
  passwordHistory      PasswordHistory[]
  rememberMeTokens     RememberMeToken[]
  projectsCreated      Project[]                  @relation("ProjectCreatedBy")
  projectsUpdated      Project[]                  @relation("ProjectUpdatedBy")
  royaltyRunsCreated   RoyaltyRun[]               @relation("RoyaltyRunCreatedBy")
  sessions             Session[]
  talent               Talent?
  verificationTokens   VerificationToken[]
  notifications        Notification[]
  sentMessages         Message[]                  @relation("SentMessages")
  receivedMessages     Message[]                  @relation("ReceivedMessages")
  amendmentApprovals   LicenseAmendmentApproval[]
  statusHistoryEntries LicenseStatusHistory[]
  extensionsRequested  LicenseExtension[]         @relation("ExtensionRequester")
  extensionsApproved   LicenseExtension[]         @relation("ExtensionApprover")

  @@index([email])
  @@index([role])
  @@index([deleted_at])
  @@index([locked_until])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expires   DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expires])
  @@map("password_reset_tokens")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("password_history")
}

model RememberMeToken {
  id         String    @id @default(cuid())
  userId     String
  tokenHash  String    @unique @map("token_hash")
  deviceInfo String?   @map("device_info")
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId, expiresAt])
  @@index([expiresAt])
  @@map("remember_me_tokens")
}

model AuditEvent {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now()) @db.Timestamptz

  // Actor information
  userId String?
  email  String?
  user   User?   @relation(fields: [userId], references: [id])

  // What was changed
  entityType String // "project", "license", "payout", "view", etc.
  entityId   String // The specific record ID
  action     String // "create", "update", "delete", "view"

  // Change tracking
  beforeJson Json? // State before change
  afterJson  Json? // State after change

  // Request context
  ipAddress String?
  userAgent String?
  requestId String? // For distributed tracing

  // Indexes for querying
  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([action, timestamp])
  @@index([requestId])
  @@index([email])
  @@map("audit_events")
}

model Creator {
  id                 String             @id @default(cuid())
  userId             String             @unique
  stageName          String
  bio                String?
  specialties        Json
  socialLinks        Json?
  stripeAccountId    String?            @unique
  onboardingStatus   String             @default("pending")
  portfolioUrl       String?
  website            String?
  availability       Json?
  preferences        Json?
  verificationStatus String             @default("pending")
  verifiedAt         DateTime?
  performanceMetrics Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipOwnerships       IpOwnership[]
  royaltyStatements  RoyaltyStatement[]
  payouts            Payout[]

  @@index([verificationStatus])
  @@index([onboardingStatus])
  @@index([userId])
  @@index([deletedAt])
  @@map("creators")
}

model Talent {
  id               String                 @id @default(cuid())
  userId           String                 @unique
  stageName        String
  bio              String
  socialMediaLinks Json?
  categories       String[]
  isVerified       Boolean                @default(false)
  rating           Float                  @default(0)
  totalEarnings    Decimal                @default(0) @db.Decimal(10, 2)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  ips              IntellectualProperty[]
  royalties        Royalty[]
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("talents")
}

model Brand {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String    @db.VarChar(255)
  industry           String?   @db.VarChar(100)
  website            String?
  description        String?
  logo               String?
  isVerified         Boolean   @default(false)
  totalSpent         Decimal   @default(0) @db.Decimal(10, 2)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  billingInfo        Json?
  brandGuidelinesUrl String?
  companySize        Json?
  contactInfo        Json?
  deletedAt          DateTime?
  targetAudience     Json?
  teamMembers        Json?
  verificationNotes  String?
  verificationStatus String    @default("pending")
  verifiedAt         DateTime?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenses           License[]
  payments           Payment[]
  projects           Project[]

  @@index([companyName])
  @@index([industry])
  @@index([verificationStatus])
  @@index([deletedAt])
  @@index([userId])
  @@index([createdAt])
  @@map("brands")
}

model Project {
  id           String        @id @default(cuid())
  brandId      String
  name         String        @db.VarChar(200)
  description  String?
  status       ProjectStatus @default(DRAFT)
  budgetCents  Int           @default(0)
  startDate    DateTime?
  endDate      DateTime?
  objectives   Json?
  requirements Json?
  metadata     Json?
  projectType  ProjectType   @default(CAMPAIGN)
  createdBy    String
  updatedBy    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  events       Event[]
  ipAssets     IpAsset[]
  licenses     License[]
  dailyMetrics DailyMetric[]
  brand        Brand         @relation(fields: [brandId], references: [id])
  creatorUser  User          @relation("ProjectCreatedBy", fields: [createdBy], references: [id])
  updaterUser  User?         @relation("ProjectUpdatedBy", fields: [updatedBy], references: [id])

  @@index([brandId, status])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([status])
  @@index([projectType])
  @@map("projects")
}

model Event {
  id         String   @id @default(cuid())
  occurredAt DateTime @default(now()) @map("occurred_at")
  source     String   @db.VarChar(50) // 'web', 'api', 'system', 'webhook'
  eventType  String   @map("event_type") @db.VarChar(100)

  // Actor (who performed the action)
  actorType String? @map("actor_type") @db.VarChar(50) // 'user', 'creator', 'brand', 'system'
  actorId   String? @map("actor_id")

  // Entity references (what was acted upon)
  projectId String? @map("project_id")
  ipAssetId String? @map("ip_asset_id")
  licenseId String? @map("license_id")

  // Legacy fields for backward compatibility
  userId    String?
  brandId   String?
  creatorId String?

  // Flexible event data
  propsJson Json @default("{}") @map("props_json")

  // Session grouping
  sessionId String? @map("session_id")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  project     Project?     @relation(fields: [projectId], references: [id])
  ipAsset     IpAsset?     @relation(fields: [ipAssetId], references: [id])
  license     License?     @relation(fields: [licenseId], references: [id])
  attribution Attribution?

  @@index([occurredAt])
  @@index([eventType, occurredAt])
  @@index([actorId, occurredAt])
  @@index([projectId, occurredAt])
  @@index([ipAssetId, occurredAt])
  @@index([licenseId, occurredAt])
  @@index([sessionId])
  @@index([createdAt])
  @@map("events")
}

model Attribution {
  id      String @id @default(cuid())
  eventId String @unique @map("event_id")

  // UTM Parameters
  utmSource   String? @map("utm_source") @db.VarChar(255)
  utmMedium   String? @map("utm_medium") @db.VarChar(255)
  utmCampaign String? @map("utm_campaign") @db.VarChar(255)
  utmTerm     String? @map("utm_term") @db.VarChar(255)
  utmContent  String? @map("utm_content") @db.VarChar(255)

  // Referrer Data
  referrer    String? @db.Text
  landingPage String? @map("landing_page") @db.Text

  // Device/Browser Context
  deviceType String? @map("device_type") @db.VarChar(50)
  browser    String? @db.VarChar(100)
  os         String? @db.VarChar(100)

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([utmSource, utmMedium, utmCampaign])
  @@index([referrer])
  @@map("attribution")
}

model DailyMetric {
  id   String   @id @default(cuid())
  date DateTime @db.Date

  // Entity dimensions (nullable for platform-wide aggregates)
  projectId String? @map("project_id")
  ipAssetId String? @map("ip_asset_id")
  licenseId String? @map("license_id")

  // Core Metrics
  views        Int @default(0)
  clicks       Int @default(0)
  conversions  Int @default(0)
  revenueCents Int @default(0) @map("revenue_cents")

  // Engagement Metrics
  uniqueVisitors Int @default(0) @map("unique_visitors")
  engagementTime Int @default(0) @map("engagement_time") // seconds

  // Flexible additional metrics
  metadata Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  project Project? @relation(fields: [projectId], references: [id])
  ipAsset IpAsset? @relation(fields: [ipAssetId], references: [id])
  license License? @relation(fields: [licenseId], references: [id])

  @@unique([date, projectId, ipAssetId, licenseId])
  @@index([date])
  @@index([projectId, date])
  @@index([ipAssetId, date])
  @@index([licenseId, date])
  @@map("daily_metrics")
}

model IntellectualProperty {
  id          String   @id @default(cuid())
  name        String
  description String
  type        IPType
  category    String
  tags        String[]
  metadata    Json?
  isActive    Boolean  @default(true)
  talentId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  talent      Talent   @relation(fields: [talentId], references: [id], onDelete: Cascade)
  files       IPFile[]

  @@map("intellectual_properties")
}

model IPFile {
  id           String               @id @default(cuid())
  url          String
  type         String
  size         Int
  originalName String
  mimeType     String
  ipId         String
  createdAt    DateTime             @default(now())
  ip           IntellectualProperty @relation(fields: [ipId], references: [id], onDelete: Cascade)

  @@map("ip_files")
}

model License {
  id                    String            @id @default(cuid())
  status                LicenseStatus     @default(DRAFT)
  autoRenew             Boolean           @default(false) @map("auto_renew")
  billingFrequency      BillingFrequency? @map("billing_frequency")
  brandId               String            @map("brand_id")
  createdAt             DateTime          @default(now()) @map("created_at")
  createdBy             String?           @map("created_by")
  deletedAt             DateTime?         @map("deleted_at")
  endDate               DateTime          @map("end_date")
  feeCents              Int               @default(0) @map("fee_cents")
  ipAssetId             String            @map("ip_asset_id")
  licenseType           LicenseType       @map("license_type")
  metadata              Json?
  parentLicenseId       String?           @map("parent_license_id")
  paymentTerms          String?           @map("payment_terms")
  projectId             String?           @map("project_id")
  renewalNotifiedAt     DateTime?         @map("renewal_notified_at")
  revShareBps           Int               @default(0) @map("rev_share_bps")
  scopeJson             Json              @map("scope_json")
  signatureProof        String?           @map("signature_proof")
  signedAt              DateTime?         @map("signed_at")
  startDate             DateTime          @map("start_date")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  updatedBy             String?           @map("updated_by")
  amendmentCount        Int               @default(0) @map("amendment_count")
  extensionCount        Int               @default(0) @map("extension_count")
  ninetyDayNoticeSentAt DateTime?         @map("ninety_day_notice_sent_at")
  sixtyDayNoticeSentAt  DateTime?         @map("sixty_day_notice_sent_at")
  thirtyDayNoticeSentAt DateTime?         @map("thirty_day_notice_sent_at")
  gracePeriodEndDate    DateTime?         @map("grace_period_end_date")
  expiredAt             DateTime?         @map("expired_at")
  gracePeriodDays       Int               @default(0) @map("grace_period_days")

  // Usage tracking fields
  usageTrackingEnabled Boolean   @default(true) @map("usage_tracking_enabled")
  lastUsageAt          DateTime? @map("last_usage_at")
  totalUsageEvents     Int       @default(0) @map("total_usage_events")

  brand         Brand                  @relation(fields: [brandId], references: [id])
  ipAsset       IpAsset                @relation(fields: [ipAssetId], references: [id])
  parentLicense License?               @relation("LicenseRenewals", fields: [parentLicenseId], references: [id])
  renewals      License[]              @relation("LicenseRenewals")
  project       Project?               @relation(fields: [projectId], references: [id])
  royaltyLines  RoyaltyLine[]
  events        Event[]
  dailyMetrics  DailyMetric[]
  amendments    LicenseAmendment[]
  extensions    LicenseExtension[]
  statusHistory LicenseStatusHistory[]

  // Usage tracking relations
  usageEvents     LicenseUsageEvent[]
  usageAggregates LicenseUsageDailyAggregate[]
  usageThresholds LicenseUsageThreshold[]
  usageOverages   LicenseUsageOverage[]
  usageForecasts  LicenseUsageForecast[]

  @@index([ipAssetId, status, endDate])
  @@index([brandId, status])
  @@index([status, endDate])
  @@index([deletedAt])
  @@index([projectId])
  @@index([usageTrackingEnabled, lastUsageAt])
  @@map("licenses")
}

model LicenseAmendment {
  id               String                     @id @default(cuid())
  licenseId        String                     @map("license_id")
  amendmentNumber  Int                        @map("amendment_number")
  proposedBy       String                     @map("proposed_by")
  proposedByRole   String                     @map("proposed_by_role")
  proposedAt       DateTime                   @default(now()) @map("proposed_at")
  approvedAt       DateTime?                  @map("approved_at")
  rejectedAt       DateTime?                  @map("rejected_at")
  status           LicenseAmendmentStatus     @default(PROPOSED)
  amendmentType    LicenseAmendmentType       @map("amendment_type")
  justification    String
  fieldsChanged    Json                       @default("[]") @map("fields_changed")
  beforeValues     Json                       @default("{}") @map("before_values")
  afterValues      Json                       @default("{}") @map("after_values")
  approvalDeadline DateTime?                  @map("approval_deadline")
  rejectionReason  String?                    @map("rejection_reason")
  createdAt        DateTime                   @default(now()) @map("created_at")
  updatedAt        DateTime                   @updatedAt @map("updated_at")
  license          License                    @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  approvals        LicenseAmendmentApproval[]

  @@unique([licenseId, amendmentNumber])
  @@index([licenseId])
  @@index([status])
  @@index([proposedAt])
  @@map("license_amendments")
}

model LicenseAmendmentApproval {
  id           String           @id @default(cuid())
  amendmentId  String           @map("amendment_id")
  approverId   String           @map("approver_id")
  approverRole String           @map("approver_role")
  status       ApprovalStatus   @default(PENDING)
  approvedAt   DateTime?        @map("approved_at")
  rejectedAt   DateTime?        @map("rejected_at")
  comments     String?
  ipAddress    String?          @map("ip_address")
  userAgent    String?          @map("user_agent")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  amendment    LicenseAmendment @relation(fields: [amendmentId], references: [id], onDelete: Cascade)
  approver     User             @relation(fields: [approverId], references: [id], onDelete: Cascade)

  @@unique([amendmentId, approverId])
  @@index([amendmentId])
  @@index([approverId])
  @@index([status])
  @@map("license_amendment_approvals")
}

model LicenseStatusHistory {
  id             String   @id @default(cuid())
  licenseId      String   @map("license_id")
  fromStatus     String   @map("from_status")
  toStatus       String   @map("to_status")
  transitionedAt DateTime @default(now()) @map("transitioned_at")
  transitionedBy String?  @map("transitioned_by")
  reason         String?
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  license        License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  user           User?    @relation(fields: [transitionedBy], references: [id], onDelete: SetNull)

  @@index([licenseId])
  @@index([transitionedAt])
  @@index([fromStatus])
  @@index([toStatus])
  @@map("license_status_history")
}

model LicenseExtension {
  id                 String          @id @default(cuid())
  licenseId          String          @map("license_id")
  requestedBy        String          @map("requested_by")
  requestedAt        DateTime        @default(now()) @map("requested_at")
  approvedAt         DateTime?       @map("approved_at")
  rejectedAt         DateTime?       @map("rejected_at")
  status             ExtensionStatus @default(PENDING)
  originalEndDate    DateTime        @map("original_end_date")
  newEndDate         DateTime        @map("new_end_date")
  extensionDays      Int             @map("extension_days")
  additionalFeeCents Int             @default(0) @map("additional_fee_cents")
  justification      String
  approvalRequired   Boolean         @default(true) @map("approval_required")
  approvedBy         String?         @map("approved_by")
  rejectionReason    String?         @map("rejection_reason")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  license            License         @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  requester          User            @relation("ExtensionRequester", fields: [requestedBy], references: [id], onDelete: Cascade)
  approver           User?           @relation("ExtensionApprover", fields: [approvedBy], references: [id], onDelete: SetNull)

  @@index([licenseId])
  @@index([status])
  @@index([requestedAt])
  @@map("license_extensions")
}

model Royalty {
  id          String        @id @default(cuid())
  licenseId   String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  period      RoyaltyPeriod
  periodStart DateTime
  periodEnd   DateTime
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?
  talentId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  talent      Talent        @relation(fields: [talentId], references: [id])

  @@map("royalties")
}

model Payment {
  id                    String        @id @default(cuid())
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("USD")
  status                PaymentStatus @default(PENDING)
  paymentMethod         String
  stripePaymentIntentId String?
  metadata              Json?
  licenseId             String?
  brandId               String
  paidAt                DateTime?
  refundedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  brand                 Brand         @relation(fields: [brandId], references: [id])

  @@map("payments")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String
  userId    String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics_events")
}

model EmailEvent {
  id             String         @id @default(cuid())
  userId         String?
  email          String
  eventType      EmailEventType
  messageId      String
  subject        String?
  templateName   String?
  metadata       Json?
  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  complainedAt   DateTime?
  bounceReason   String?
  clickedUrl     String?
  userAgent      String?
  ipAddress      String?
  uniqueOpen     Boolean?       @default(true) @map("unique_open")
  linkPosition   Int?           @map("link_position")
  geographicData Json?          @map("geographic_data")
  deviceType     String?        @map("device_type")
  emailClient    String?        @map("email_client")
  createdAt      DateTime       @default(now())
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, eventType])
  @@index([email, eventType])
  @@index([messageId])
  @@index([sentAt])
  @@map("email_events")
}

model EmailPreferences {
  id                          String          @id @default(cuid())
  userId                      String          @unique
  royaltyStatements           Boolean         @default(true)
  licenseExpiry               Boolean         @default(true)
  projectInvitations          Boolean         @default(true)
  messages                    Boolean         @default(true)
  payouts                     Boolean         @default(true)
  digestFrequency             DigestFrequency @default(IMMEDIATE)
  newsletters                 Boolean         @default(true)
  announcements               Boolean         @default(true)
  unsubscribedAt              DateTime?
  globalUnsubscribe           Boolean         @default(false) @map("global_unsubscribe")
  categoryPreferences         Json?           @map("category_preferences")
  frequencyPreference         String          @default("immediate") @map("frequency_preference")
  unsubscribeToken            String?         @unique @map("unsubscribe_token")
  preferenceCenterLastVisited DateTime?       @map("preference_center_last_visited")
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  user                        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([unsubscribeToken])
  @@index([globalUnsubscribe])
  @@map("email_preferences")
}

model EmailSuppression {
  id           String            @id @default(cuid())
  email        String            @unique
  reason       SuppressionReason
  suppressedAt DateTime          @default(now())
  bounceType   String?
  bounceReason String?

  @@index([email])
  @@map("email_suppressions")
}

model EmailReputationMetrics {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  senderDomain    String   @map("sender_domain")
  bounceRate      Float    @default(0) @map("bounce_rate")
  complaintRate   Float    @default(0) @map("complaint_rate")
  deliveryRate    Float    @default(0) @map("delivery_rate")
  openRate        Float?   @map("open_rate")
  clickRate       Float?   @map("click_rate")
  spamScore       Float?   @map("spam_score")
  reputationScore Int      @default(100) @map("reputation_score")
  blacklistStatus Json?    @map("blacklist_status")
  warnings        Json?
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([timestamp])
  @@index([senderDomain])
  @@index([reputationScore])
  @@map("email_reputation_metrics")
}

model DomainReputationLog {
  id                     String   @id @default(cuid())
  checkedAt              DateTime @default(now()) @map("checked_at")
  domainName             String   @map("domain_name")
  reputationSource       String   @map("reputation_source")
  reputationScore        Float?   @map("reputation_score")
  spamRate               Float?   @map("spam_rate")
  inboxPlacementRate     Float?   @map("inbox_placement_rate")
  authenticationStatus   Json?    @map("authentication_status")
  blacklistStatus        Json?    @map("blacklist_status")
  feedbackLoopComplaints Int?     @map("feedback_loop_complaints")
  reportData             Json?    @map("report_data")
  createdAt              DateTime @default(now()) @map("created_at")

  @@index([checkedAt])
  @@index([domainName])
  @@index([reputationSource])
  @@map("domain_reputation_log")
}

model EmailTest {
  id                             String                @id @default(cuid())
  name                           String
  description                    String?
  status                         EmailTestStatus       @default(DRAFT)
  testType                       String                @map("test_type")
  startDate                      DateTime?             @map("start_date")
  endDate                        DateTime?             @map("end_date")
  variants                       Json
  allocationPercentage           Json                  @map("allocation_percentage")
  winningVariantId               String?               @map("winning_variant_id")
  primaryMetric                  String                @map("primary_metric")
  statisticalSignificanceReached Boolean               @default(false) @map("statistical_significance_reached")
  confidenceLevel                Float?                @map("confidence_level")
  createdAt                      DateTime              @default(now()) @map("created_at")
  updatedAt                      DateTime              @updatedAt @map("updated_at")
  assignments                    EmailTestAssignment[]

  @@index([status])
  @@index([testType])
  @@index([startDate])
  @@map("email_tests")
}

model EmailTestAssignment {
  id          String    @id @default(cuid())
  testId      String    @map("test_id")
  userId      String?   @map("user_id")
  email       String
  variantId   String    @map("variant_id")
  assignedAt  DateTime  @default(now()) @map("assigned_at")
  emailSentId String?   @map("email_sent_id")
  opened      Boolean   @default(false)
  clicked     Boolean   @default(false)
  converted   Boolean   @default(false)
  test        EmailTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([testId])
  @@index([userId])
  @@index([variantId])
  @@index([email])
  @@map("email_test_assignments")
}

model ScheduledEmail {
  id                  String               @id @default(cuid())
  emailType           String               @map("email_type")
  recipientUserId     String?              @map("recipient_user_id")
  recipientEmail      String               @map("recipient_email")
  recipientListId     String?              @map("recipient_list_id")
  templateId          String               @map("template_id")
  subject             String
  personalizationData Json?                @map("personalization_data")
  scheduledSendTime   DateTime             @map("scheduled_send_time")
  timezone            String?
  optimizeSendTime    Boolean              @default(false) @map("optimize_send_time")
  status              ScheduledEmailStatus @default(PENDING)
  sentAt              DateTime?            @map("sent_at")
  failedAt            DateTime?            @map("failed_at")
  retryCount          Int                  @default(0) @map("retry_count")
  errorMessage        String?              @map("error_message")
  recurrencePattern   String?              @map("recurrence_pattern")
  nextSendTime        DateTime?            @map("next_send_time")
  parentScheduleId    String?              @map("parent_schedule_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  recipientUser       User?                @relation(fields: [recipientUserId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([scheduledSendTime])
  @@index([recipientUserId])
  @@index([recipientEmail])
  @@index([emailType])
  @@map("scheduled_emails")
}

model EmailPersonalizationVariable {
  id                  String   @id @default(cuid())
  variableName        String   @unique @map("variable_name")
  dataType            String   @map("data_type")
  defaultValue        String?  @map("default_value")
  description         String?
  formattingRules     Json?    @map("formatting_rules")
  isRequired          Boolean  @default(false) @map("is_required")
  applicableUserTypes String[] @map("applicable_user_types")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@index([variableName])
  @@map("email_personalization_variables")
}

model EmailCampaignAnalytics {
  id                  String    @id @default(cuid())
  campaignId          String    @unique @map("campaign_id")
  campaignName        String    @map("campaign_name")
  campaignType        String    @map("campaign_type")
  sentCount           Int       @default(0) @map("sent_count")
  deliveredCount      Int       @default(0) @map("delivered_count")
  bouncedCount        Int       @default(0) @map("bounced_count")
  openedCount         Int       @default(0) @map("opened_count")
  uniqueOpenedCount   Int       @default(0) @map("unique_opened_count")
  clickedCount        Int       @default(0) @map("clicked_count")
  uniqueClickedCount  Int       @default(0) @map("unique_clicked_count")
  unsubscribedCount   Int       @default(0) @map("unsubscribed_count")
  complainedCount     Int       @default(0) @map("complained_count")
  deliveryRate        Float?    @map("delivery_rate")
  openRate            Float?    @map("open_rate")
  clickRate           Float?    @map("click_rate")
  clickToOpenRate     Float?    @map("click_to_open_rate")
  unsubscribeRate     Float?    @map("unsubscribe_rate")
  complaintRate       Float?    @map("complaint_rate")
  linkPerformance     Json?     @map("link_performance")
  deviceBreakdown     Json?     @map("device_breakdown")
  geographicBreakdown Json?     @map("geographic_breakdown")
  sentAt              DateTime? @map("sent_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([campaignId])
  @@index([sentAt])
  @@index([campaignType])
  @@map("email_campaign_analytics")
}

model EmailUnsubscribeLog {
  id                  String   @id @default(cuid())
  userId              String?  @map("user_id")
  email               String
  unsubscribeAction   String   @map("unsubscribe_action")
  unsubscribeSource   String   @map("unsubscribe_source")
  campaignId          String?  @map("campaign_id")
  categoriesAffected  String[] @map("categories_affected")
  previousPreferences Json?    @map("previous_preferences")
  newPreferences      Json?    @map("new_preferences")
  userAgent           String?  @map("user_agent")
  ipAddress           String?  @map("ip_address")
  createdAt           DateTime @default(now()) @map("created_at")
  user                User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email])
  @@index([createdAt])
  @@map("email_unsubscribe_log")
}

// ===========================
// Email Campaigns System
// ===========================

model EmailCampaign {
  id          String              @id @default(cuid())
  name        String              @db.VarChar(255)
  description String?
  createdBy   String              @map("created_by")
  status      EmailCampaignStatus @default(DRAFT)
  templateId  String              @map("template_id")
  subject     String              @db.VarChar(500)
  previewText String?             @map("preview_text") @db.VarChar(200)

  // Audience and Segmentation
  segmentCriteria Json? @map("segment_criteria")
  recipientCount  Int   @default(0) @map("recipient_count")

  // Scheduling
  scheduledSendTime DateTime  @map("scheduled_send_time")
  timezone          String?   @default("UTC")
  sendStartedAt     DateTime? @map("send_started_at")
  sendCompletedAt   DateTime? @map("send_completed_at")

  // Rate Limiting Configuration
  messagesPerHour Int @default(1000) @map("messages_per_hour")
  batchSize       Int @default(100) @map("batch_size")

  // Tracking and Analytics
  sentCount         Int @default(0) @map("sent_count")
  deliveredCount    Int @default(0) @map("delivered_count")
  openedCount       Int @default(0) @map("opened_count")
  clickedCount      Int @default(0) @map("clicked_count")
  bouncedCount      Int @default(0) @map("bounced_count")
  unsubscribedCount Int @default(0) @map("unsubscribed_count")
  complainedCount   Int @default(0) @map("complained_count")
  failedCount       Int @default(0) @map("failed_count")

  // Metadata
  tags               String[]  @default([])
  metadata           Json?
  cancelledAt        DateTime? @map("cancelled_at")
  cancelledBy        String?   @map("cancelled_by")
  cancellationReason String?   @map("cancellation_reason")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  creator    User                @relation("CampaignCreatedBy", fields: [createdBy], references: [id])
  recipients CampaignRecipient[]

  @@index([createdBy])
  @@index([status])
  @@index([scheduledSendTime])
  @@index([createdAt])
  @@map("email_campaigns")
}

model CampaignRecipient {
  id         String  @id @default(cuid())
  campaignId String  @map("campaign_id")
  userId     String? @map("user_id")
  email      String

  // Send Status
  status         CampaignRecipientStatus @default(PENDING)
  sentAt         DateTime?               @map("sent_at")
  deliveredAt    DateTime?               @map("delivered_at")
  openedAt       DateTime?               @map("opened_at")
  firstClickedAt DateTime?               @map("first_clicked_at")
  bouncedAt      DateTime?               @map("bounced_at")
  unsubscribedAt DateTime?               @map("unsubscribed_at")
  complainedAt   DateTime?               @map("complained_at")

  // Error Tracking
  errorMessage String? @map("error_message")
  retryCount   Int     @default(0) @map("retry_count")

  // Personalization Data
  personalizationData Json? @map("personalization_data")

  // External References
  messageId String? @map("message_id")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user     User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([campaignId, status])
  @@index([userId])
  @@index([email])
  @@index([status])
  @@map("campaign_recipients")
}

model SavedEmailSegment {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(255)
  description      String?
  criteria         Json
  estimatedSize    Int?      @map("estimated_size")
  lastCalculatedAt DateTime? @map("last_calculated_at")

  // Access Control
  createdBy String  @map("created_by")
  isPublic  Boolean @default(false) @map("is_public")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([createdBy])
  @@index([isPublic])
  @@map("saved_email_segments")
}

model EmailCampaignClick {
  id           String   @id @default(cuid())
  campaignId   String   @map("campaign_id")
  recipientId  String?  @map("recipient_id")
  email        String
  clickedUrl   String   @map("clicked_url")
  linkPosition Int?     @map("link_position")
  clickedAt    DateTime @default(now()) @map("clicked_at")

  // Tracking Data
  userAgent      String? @map("user_agent")
  ipAddress      String? @map("ip_address")
  deviceType     String? @map("device_type")
  geographicData Json?   @map("geographic_data")

  @@index([campaignId])
  @@index([recipientId])
  @@index([clickedAt])
  @@map("email_campaign_clicks")
}

model EmailCampaignReport {
  id         String @id @default(cuid())
  campaignId String @unique @map("campaign_id")
  reportType String @map("report_type")

  // Aggregated Metrics (pre-computed for performance)
  metrics             Json
  deviceBreakdown     Json? @map("device_breakdown")
  geographicBreakdown Json? @map("geographic_breakdown")
  hourlyBreakdown     Json? @map("hourly_breakdown")
  linkPerformance     Json? @map("link_performance")

  // Generation Info
  generatedAt   DateTime @default(now()) @map("generated_at")
  lastUpdatedAt DateTime @updatedAt @map("last_updated_at")

  @@index([generatedAt])
  @@map("email_campaign_reports")
}

model IpAsset {
  id                  String             @id @default(cuid())
  projectId           String?            @map("project_id")
  title               String             @db.VarChar(255)
  description         String?
  type                AssetType
  storageKey          String             @unique @map("storage_key")
  fileSize            BigInt             @map("file_size")
  mimeType            String             @map("mime_type") @db.VarChar(100)
  thumbnailUrl        String?            @map("thumbnail_url")
  previewUrl          String?            @map("preview_url")
  version             Int                @default(1)
  parentAssetId       String?            @map("parent_asset_id")
  metadata            Json?
  status              AssetStatus        @default(DRAFT)
  scanStatus          ScanStatus         @default(PENDING) @map("scan_status")
  scanResult          Json?              @map("scan_result")
  createdBy           String             @map("created_by")
  updatedBy           String?            @map("updated_by")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  deletedAt           DateTime?          @map("deleted_at")
  creator             User               @relation("AssetCreator", fields: [createdBy], references: [id])
  parentAsset         IpAsset?           @relation("AssetDerivatives", fields: [parentAssetId], references: [id], onDelete: Restrict)
  derivatives         IpAsset[]          @relation("AssetDerivatives")
  project             Project?           @relation(fields: [projectId], references: [id])
  updater             User?              @relation("AssetUpdater", fields: [updatedBy], references: [id])
  ownerships          IpOwnership[]
  licenses            License[]
  royaltyLines        RoyaltyLine[]
  events              Event[]
  dailyMetrics        DailyMetric[]
  sourceRelationships FileRelationship[] @relation("SourceRelationships")
  targetRelationships FileRelationship[] @relation("TargetRelationships")

  @@index([projectId, status])
  @@index([createdBy, status])
  @@index([type, status])
  @@index([storageKey])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("ip_assets")
}

model FileRelationship {
  id               String    @id @default(cuid())
  sourceAssetId    String    @map("source_asset_id")
  targetAssetId    String    @map("target_asset_id")
  relationshipType String    @map("relationship_type")
  metadata         Json      @default("{}")
  createdAt        DateTime  @default(now()) @map("created_at")
  deletedAt        DateTime? @map("deleted_at")
  sourceAsset      IpAsset   @relation("SourceRelationships", fields: [sourceAssetId], references: [id], onDelete: Cascade)
  targetAsset      IpAsset   @relation("TargetRelationships", fields: [targetAssetId], references: [id], onDelete: Cascade)

  @@unique([sourceAssetId, targetAssetId, relationshipType, deletedAt])
  @@index([sourceAssetId])
  @@index([targetAssetId])
  @@index([relationshipType])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("file_relationships")
}

model IpOwnership {
  id                String        @id @default(cuid())
  ipAssetId         String        @map("ip_asset_id")
  creatorId         String        @map("creator_id")
  shareBps          Int           @map("share_bps")
  ownershipType     OwnershipType @default(PRIMARY) @map("ownership_type")
  startDate         DateTime      @default(now()) @map("start_date")
  endDate           DateTime?     @map("end_date")
  contractReference String?       @map("contract_reference")
  legalDocUrl       String?       @map("legal_doc_url")
  notes             Json?
  disputed          Boolean       @default(false)
  disputedAt        DateTime?     @map("disputed_at")
  disputeReason     String?       @map("dispute_reason")
  disputedBy        String?       @map("disputed_by")
  resolvedAt        DateTime?     @map("resolved_at")
  resolvedBy        String?       @map("resolved_by")
  resolutionNotes   String?       @map("resolution_notes")
  createdBy         String        @map("created_by")
  updatedBy         String        @map("updated_by")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdByUser     User          @relation("IpOwnershipCreatedBy", fields: [createdBy], references: [id])
  creator           Creator       @relation(fields: [creatorId], references: [id])
  ipAsset           IpAsset       @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  updatedByUser     User          @relation("IpOwnershipUpdatedBy", fields: [updatedBy], references: [id])

  @@index([ipAssetId, startDate, endDate])
  @@index([creatorId])
  @@index([ownershipType])
  @@index([disputed])
  @@map("ip_ownerships")
}

model RoyaltyRun {
  id                  String             @id @default(cuid())
  periodStart         DateTime           @map("period_start")
  periodEnd           DateTime           @map("period_end")
  status              RoyaltyRunStatus   @default(DRAFT)
  totalRevenueCents   Int                @default(0) @map("total_revenue_cents")
  totalRoyaltiesCents Int                @default(0) @map("total_royalties_cents")
  processedAt         DateTime?          @map("processed_at")
  lockedAt            DateTime?          @map("locked_at")
  createdBy           String             @map("created_by")
  notes               String?
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  statements          RoyaltyStatement[]
  creator             User               @relation("RoyaltyRunCreatedBy", fields: [createdBy], references: [id])

  @@index([periodStart, periodEnd])
  @@index([status])
  @@index([createdAt])
  @@map("royalty_runs")
}

model RoyaltyStatement {
  id                 String                 @id @default(cuid())
  royaltyRunId       String                 @map("royalty_run_id")
  creatorId          String                 @map("creator_id")
  totalEarningsCents Int                    @default(0) @map("total_earnings_cents")
  status             RoyaltyStatementStatus @default(PENDING)
  reviewedAt         DateTime?              @map("reviewed_at")
  disputedAt         DateTime?              @map("disputed_at")
  disputeReason      String?                @map("dispute_reason")
  paidAt             DateTime?              @map("paid_at")
  paymentReference   String?                @map("payment_reference")
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @updatedAt @map("updated_at")
  royaltyRun         RoyaltyRun             @relation(fields: [royaltyRunId], references: [id])
  creator            Creator                @relation(fields: [creatorId], references: [id])
  lines              RoyaltyLine[]
  payouts            Payout[]

  @@unique([royaltyRunId, creatorId])
  @@index([creatorId, createdAt])
  @@index([status])
  @@map("royalty_statements")
}

model RoyaltyLine {
  id                     String           @id @default(cuid())
  royaltyStatementId     String           @map("royalty_statement_id")
  licenseId              String           @map("license_id")
  ipAssetId              String           @map("ip_asset_id")
  revenueCents           Int              @map("revenue_cents")
  shareBps               Int              @map("share_bps")
  calculatedRoyaltyCents Int              @map("calculated_royalty_cents")
  periodStart            DateTime         @map("period_start")
  periodEnd              DateTime         @map("period_end")
  metadata               Json?
  createdAt              DateTime         @default(now()) @map("created_at")
  royaltyStatement       RoyaltyStatement @relation(fields: [royaltyStatementId], references: [id])
  license                License          @relation(fields: [licenseId], references: [id])
  ipAsset                IpAsset          @relation(fields: [ipAssetId], references: [id])

  @@index([royaltyStatementId])
  @@index([licenseId])
  @@index([ipAssetId])
  @@map("royalty_lines")
}

model Payout {
  id                 String            @id @default(cuid())
  creatorId          String            @map("creator_id")
  royaltyStatementId String?           @map("royalty_statement_id")
  amountCents        Int               @map("amount_cents")
  stripeTransferId   String?           @unique @map("stripe_transfer_id")
  status             PayoutStatus      @default(PENDING)
  processedAt        DateTime?         @map("processed_at")
  failedReason       String?           @map("failed_reason")
  retryCount         Int               @default(0) @map("retry_count")
  lastRetryAt        DateTime?         @map("last_retry_at")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  creator            Creator           @relation(fields: [creatorId], references: [id])
  royaltyStatement   RoyaltyStatement? @relation(fields: [royaltyStatementId], references: [id])

  @@index([creatorId, status])
  @@index([status, createdAt])
  @@index([stripeTransferId])
  @@map("payouts")
}

model StorageMetrics {
  id              String   @id @default(cuid())
  snapshotDate    DateTime @map("snapshot_date") @db.Timestamptz
  entityType      String   @map("entity_type")
  entityId        String?  @map("entity_id")
  totalBytes      BigInt   @default(0) @map("total_bytes")
  fileCount       Int      @default(0) @map("file_count")
  averageFileSize BigInt   @default(0) @map("average_file_size")
  largestFileSize BigInt   @default(0) @map("largest_file_size")
  largestFileId   String?  @map("largest_file_id")
  storageTrendBps Int      @default(0) @map("storage_trend_bps")
  breakdownByType Json     @default("{}") @map("breakdown_by_type")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([snapshotDate, entityType, entityId])
  @@index([snapshotDate(sort: Desc)])
  @@index([entityType, entityId, snapshotDate(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("storage_metrics")
}

model Notification {
  id        String               @id @default(cuid())
  userId    String               @map("user_id")
  type      NotificationType
  title     String               @db.VarChar(255)
  message   String
  actionUrl String?              @map("action_url")
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean              @default(false)
  readAt    DateTime?            @map("read_at")
  metadata  Json?
  createdAt DateTime             @default(now()) @map("created_at")
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@index([userId, type])
  @@index([createdAt(sort: Desc)])
  @@map("notifications")
}

model MessageThread {
  id               String    @id @default(cuid())
  subject          String?   @db.VarChar(255)
  participantsJson Json      @map("participants_json")
  lastMessageAt    DateTime  @map("last_message_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  messages         Message[]

  @@index([lastMessageAt(sort: Desc)])
  @@index([deletedAt])
  @@map("message_threads")
}

model Message {
  id          String              @id @default(cuid())
  threadId    String              @map("thread_id")
  senderId    String              @map("sender_id")
  recipientId String              @map("recipient_id")
  body        String
  readAt      DateTime?           @map("read_at")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  thread      MessageThread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender      User                @relation("SentMessages", fields: [senderId], references: [id], onDelete: Restrict)
  recipient   User                @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Restrict)
  attachments MessageAttachment[]

  @@index([threadId, createdAt(sort: Desc)])
  @@index([recipientId, readAt])
  @@index([senderId])
  @@index([deletedAt])
  @@map("messages")
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String   @map("message_id")
  storageKey String   @map("storage_key")
  fileName   String   @map("file_name")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  createdAt  DateTime @default(now()) @map("created_at")
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("message_attachments")
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum ProjectType {
  CAMPAIGN
  CONTENT
  LICENSING
}

enum UserRole {
  ADMIN
  CREATOR
  BRAND
  VIEWER
}

enum IPType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  BRAND
  TRADEMARK
}

enum LicenseType {
  EXCLUSIVE
  NON_EXCLUSIVE
  EXCLUSIVE_TERRITORY
}

enum LicenseStatus {
  DRAFT
  PENDING_APPROVAL
  PENDING_SIGNATURE
  ACTIVE
  EXPIRING_SOON
  EXPIRED
  RENEWED
  TERMINATED
  DISPUTED
  CANCELED
  SUSPENDED
}

enum LicenseAmendmentStatus {
  PROPOSED
  APPROVED
  REJECTED
  SUPERSEDED
}

enum LicenseAmendmentType {
  FINANCIAL
  SCOPE
  DATES
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExtensionStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum BillingFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum RoyaltyType {
  PERCENTAGE
  FIXED
  TIERED
}

enum RoyaltyPeriod {
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  FAILED
}

enum DigestFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  NEVER
}

enum SuppressionReason {
  BOUNCE
  COMPLAINT
  UNSUBSCRIBE
  MANUAL
}

enum OwnershipType {
  PRIMARY
  CONTRIBUTOR
  DERIVATIVE
  TRANSFERRED
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  THREE_D
  OTHER
}

enum AssetStatus {
  DRAFT
  PROCESSING
  REVIEW
  APPROVED
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum ScanStatus {
  PENDING
  SCANNING
  CLEAN
  INFECTED
  ERROR
}

enum RoyaltyRunStatus {
  DRAFT
  CALCULATED
  LOCKED
  PROCESSING
  COMPLETED
  FAILED
}

enum RoyaltyStatementStatus {
  PENDING
  REVIEWED
  DISPUTED
  RESOLVED
  PAID
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EmailTestStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ScheduledEmailStatus {
  PENDING
  QUEUED
  SENT
  FAILED
  CANCELLED
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum CampaignRecipientStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  UNSUBSCRIBED
  COMPLAINED
}

enum NotificationType {
  LICENSE
  PAYOUT
  ROYALTY
  PROJECT
  SYSTEM
  MESSAGE
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// License Usage Tracking Models

model LicenseUsageEvent {
  id                 String   @id @default(cuid())
  licenseId          String   @map("license_id")
  occurredAt         DateTime @default(now()) @map("occurred_at")
  usageType          String   @db.VarChar(50) // 'view', 'download', 'impression', 'click', 'play', 'stream'
  quantity           Int      @default(1)
  geographicLocation String?  @map("geographic_location") @db.VarChar(100)
  platform           String?  @db.VarChar(50) // 'web', 'mobile', 'tv', 'print', 'social'
  deviceType         String?  @map("device_type") @db.VarChar(50)
  referrer           String?
  revenueCents       Int      @default(0) @map("revenue_cents")
  metadata           Json     @default("{}")
  sessionId          String?  @map("session_id")
  idempotencyKey     String?  @unique @map("idempotency_key")
  createdAt          DateTime @default(now()) @map("created_at")
  license            License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId, occurredAt(sort: Desc)])
  @@index([usageType, occurredAt(sort: Desc)])
  @@index([occurredAt(sort: Desc)])
  @@index([sessionId])
  @@map("license_usage_events")
}

model LicenseUsageDailyAggregate {
  id                String   @id @default(cuid())
  licenseId         String   @map("license_id")
  date              DateTime @db.Date
  totalViews        Int      @default(0) @map("total_views")
  totalDownloads    Int      @default(0) @map("total_downloads")
  totalImpressions  Int      @default(0) @map("total_impressions")
  totalClicks       Int      @default(0) @map("total_clicks")
  totalPlays        Int      @default(0) @map("total_plays")
  totalStreams      Int      @default(0) @map("total_streams")
  totalQuantity     Int      @default(0) @map("total_quantity")
  totalRevenueCents Int      @default(0) @map("total_revenue_cents")
  uniqueSessions    Int      @default(0) @map("unique_sessions")
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  license           License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, date])
  @@index([licenseId, date(sort: Desc)])
  @@index([date(sort: Desc)])
  @@map("license_usage_daily_aggregates")
}

model LicenseUsageThreshold {
  id               String                @id @default(cuid())
  licenseId        String                @map("license_id")
  usageType        String                @db.VarChar(50)
  limitQuantity    Int                   @map("limit_quantity")
  periodType       String                @db.VarChar(20) // 'daily', 'weekly', 'monthly', 'total'
  gracePercentage  Int                   @default(0) @map("grace_percentage")
  warningAt50      Boolean               @default(true) @map("warning_at_50")
  warningAt75      Boolean               @default(true) @map("warning_at_75")
  warningAt90      Boolean               @default(true) @map("warning_at_90")
  warningAt100     Boolean               @default(true) @map("warning_at_100")
  lastWarningLevel Int                   @default(0) @map("last_warning_level")
  lastWarningAt    DateTime?             @map("last_warning_at")
  allowOverage     Boolean               @default(false) @map("allow_overage")
  overageRateCents Int?                  @map("overage_rate_cents")
  isActive         Boolean               @default(true) @map("is_active")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")
  license          License               @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  overages         LicenseUsageOverage[]

  @@index([licenseId])
  @@index([usageType])
  @@map("license_usage_thresholds")
}

model LicenseUsageOverage {
  id                 String                @id @default(cuid())
  licenseId          String                @map("license_id")
  thresholdId        String                @map("threshold_id")
  periodStart        DateTime              @map("period_start")
  periodEnd          DateTime              @map("period_end")
  usageType          String                @db.VarChar(50)
  limitQuantity      Int                   @map("limit_quantity")
  actualQuantity     Int                   @map("actual_quantity")
  overageQuantity    Int                   @map("overage_quantity")
  overageRateCents   Int?                  @map("overage_rate_cents")
  calculatedFeeCents Int?                  @map("calculated_fee_cents")
  billedFeeCents     Int?                  @map("billed_fee_cents")
  status             String                @default("DETECTED") @db.VarChar(20) // 'DETECTED', 'PENDING_APPROVAL', 'APPROVED', 'BILLED', 'DISPUTED'
  approvalRequired   Boolean               @default(false) @map("approval_required")
  approvedBy         String?               @map("approved_by")
  approvedAt         DateTime?             @map("approved_at")
  stripeInvoiceId    String?               @map("stripe_invoice_id")
  billedAt           DateTime?             @map("billed_at")
  notes              String?
  metadata           Json                  @default("{}")
  detectedAt         DateTime              @default(now()) @map("detected_at")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @updatedAt @map("updated_at")
  license            License               @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  threshold          LicenseUsageThreshold @relation(fields: [thresholdId], references: [id], onDelete: Cascade)

  @@index([licenseId, detectedAt(sort: Desc)])
  @@index([status, detectedAt(sort: Desc)])
  @@index([stripeInvoiceId])
  @@map("license_usage_overages")
}

model LicenseUsageForecast {
  id                  String    @id @default(cuid())
  licenseId           String    @map("license_id")
  usageType           String    @db.VarChar(50)
  forecastDate        DateTime  @map("forecast_date") @db.Date
  periodStart         DateTime  @map("period_start") @db.Date
  periodEnd           DateTime  @map("period_end") @db.Date
  predictedQuantity   Int       @map("predicted_quantity")
  lowerBound          Int?      @map("lower_bound")
  upperBound          Int?      @map("upper_bound")
  confidenceLevel     Decimal   @default(0.95) @map("confidence_level") @db.Decimal(3, 2)
  predictedBreachDate DateTime? @map("predicted_breach_date") @db.Date
  breachProbability   Decimal?  @map("breach_probability") @db.Decimal(3, 2)
  forecastingMethod   String    @map("forecasting_method") @db.VarChar(50)
  historicalDaysUsed  Int?      @map("historical_days_used")
  meanAbsoluteError   Decimal?  @map("mean_absolute_error") @db.Decimal(10, 2)
  accuracyScore       Decimal?  @map("accuracy_score") @db.Decimal(3, 2)
  metadata            Json      @default("{}")
  calculatedAt        DateTime  @default(now()) @map("calculated_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  license             License   @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId, forecastDate(sort: Desc)])
  @@index([predictedBreachDate])
  @@map("license_usage_forecasts")
}
