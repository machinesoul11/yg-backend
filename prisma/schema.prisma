generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_POOLED")
  directUrl = env("DATABASE_URL")
}

model User {
  id                           String                     @id @default(cuid())
  email                        String                     @unique
  name                         String?
  avatar                       String?
  role                         UserRole                   @default(VIEWER)
  password_hash                String?
  email_verified               DateTime?
  deleted_at                   DateTime?
  isActive                     Boolean                    @default(true)
  locked_until                 DateTime?
  failed_login_count           Int                        @default(0)
  last_failed_login            DateTime?
  lastLoginAt                  DateTime?
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  phone_number                 String?
  phone_verified               Boolean                    @default(false)
  preferred_2fa_method         TwoFactorMethod?
  two_factor_enabled           Boolean                    @default(false)
  two_factor_secret            String?
  two_factor_verified_at       DateTime?
  captcha_required_at          DateTime?
  total_failed_attempts        Int                        @default(0)
  last_login_ip                String?
  last_login_location          String?
  known_locations              String[]
  known_devices                String[]
  autoLogoutAfterHours         Int                        @default(24) @map("auto_logout_after_hours")
  maxConcurrentSessions        Int                        @default(5) @map("max_concurrent_sessions")
  two_factor_grace_period_ends DateTime?                  @map("two_factor_grace_period_ends")
  two_factor_last_reset_at     DateTime?                  @map("two_factor_last_reset_at")
  two_factor_last_reset_by     String?                    @map("two_factor_last_reset_by")
  two_factor_required          Boolean                    @default(false) @map("two_factor_required")
  accounts                     Account[]
  adminRoles                   AdminRole[]
  auditEvents                  AuditEvent[]
  blogRedirectsCreated         BlogRedirect[]             @relation("BlogRedirectsCreatedBy")
  brand                        Brand?
  campaignRecipients           CampaignRecipient[]
  creator                      Creator?
  customMetricDefinitions      CustomMetricDefinition[]   @relation("CustomMetricCreator")
  campaignsCreated             EmailCampaign[]            @relation("CampaignCreatedBy")
  emailEvents                  EmailEvent[]
  emailPreferences             EmailPreferences?
  emailTestAssignments         EmailTestAssignment[]
  emailUnsubscribeLogs         EmailUnsubscribeLog[]
  financialReportsGenerated    FinancialReport[]          @relation("FinancialReportsGenerated")
  assetsCreated                IpAsset[]                  @relation("AssetCreator")
  assetsUpdated                IpAsset[]                  @relation("AssetUpdater")
  ownershipCreated             IpOwnership[]              @relation("IpOwnershipCreatedBy")
  ownershipUpdated             IpOwnership[]              @relation("IpOwnershipUpdatedBy")
  amendmentApprovals           LicenseAmendmentApproval[]
  extensionsApproved           LicenseExtension[]         @relation("ExtensionApprover")
  extensionsRequested          LicenseExtension[]         @relation("ExtensionRequester")
  statusHistoryEntries         LicenseStatusHistory[]
  loginAttempts                LoginAttempt[]
  receivedMessages             Message[]                  @relation("ReceivedMessages")
  sentMessages                 Message[]                  @relation("SentMessages")
  notifications                Notification[]
  passwordHistory              PasswordHistory[]
  passwordResetTokens          PasswordResetToken[]
  postExperimentAssignments    PostExperimentAssignment[] @relation("PostExperimentAssignments")
  postExperimentsCreated       PostExperiment[]           @relation("PostExperimentsCreatedBy")
  postRevisionsCreated         PostRevision[]             @relation("PostRevisionsAuthor")
  workflowHistoryCreated       PostWorkflowHistory[]      @relation("WorkflowHistoryCreatedBy")
  postsAssigned                Post[]                     @relation("PostsAssignedTo")
  postsAuthored                Post[]                     @relation("PostsAuthor")
  projectsCreated              Project[]                  @relation("ProjectCreatedBy")
  projectsUpdated              Project[]                  @relation("ProjectUpdatedBy")
  rememberMeTokens             RememberMeToken[]
  reportDownloads              ReportDownload[]           @relation("ReportDownloads")
  robotsConfigCreated          RobotsConfig[]             @relation("RobotsConfigCreatedBy")
  royaltyRunsCreated           RoyaltyRun[]               @relation("RoyaltyRunCreatedBy")
  savedSearches                SavedSearch[]              @relation("SavedSearches")
  scheduledEmails              ScheduledEmail[]
  scheduledReportsCreated      ScheduledReport[]          @relation("ScheduledReportsCreated")
  searchAnalyticsEvents        SearchAnalyticsEvent[]     @relation("SearchAnalyticsEvents")
  sessions                     Session[]
  smsVerificationCodes         SmsVerificationCode[]
  talent                       Talent?
  taxFormJobsCreated           TaxFormJob[]
  taxWithholdingsCreated       TaxWithholding[]
  trustedDevices               TrustedDevice[]
  twoFactorBackupCodes         TwoFactorBackupCode[]
  verificationTokens           VerificationToken[]

  @@index([email])
  @@index([role])
  @@index([deleted_at])
  @@index([locked_until])
  @@index([two_factor_enabled])
  @@index([captcha_required_at])
  @@index([last_login_ip])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                String    @id @default(cuid())
  sessionToken      String    @unique
  userId            String
  expires           DateTime
  createdAt         DateTime  @default(now()) @map("created_at")
  deviceFingerprint String?   @map("device_fingerprint")
  deviceName        String?   @map("device_name")
  ipAddress         String?   @map("ip_address")
  lastActivityAt    DateTime  @default(now()) @map("last_activity_at")
  revokedAt         DateTime? @map("revoked_at")
  revokedReason     String?   @map("revoked_reason")
  userAgent         String?   @map("user_agent")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expires])
  @@map("verification_tokens")
}

model TwoFactorBackupCode {
  id        String    @id @default(cuid())
  userId    String
  code      String
  used      Boolean   @default(false)
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, used])
  @@map("two_factor_backup_codes")
}

model SmsVerificationCode {
  id              String    @id @default(cuid())
  userId          String
  codeHash        String    @map("code_hash")
  phoneNumber     String    @map("phone_number")
  attempts        Int       @default(0)
  verified        Boolean   @default(false)
  verifiedAt      DateTime? @map("verified_at")
  expires         DateTime
  twilioMessageId String?   @map("twilio_message_id")
  deliveryStatus  String?   @map("delivery_status")
  deliveryError   String?   @map("delivery_error")
  cost            Float?
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, verified])
  @@index([expires])
  @@index([twilioMessageId])
  @@map("sms_verification_codes")
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  expires   DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expires])
  @@map("password_reset_tokens")
}

model PasswordHistory {
  id           String   @id @default(cuid())
  userId       String
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("password_history")
}

model RememberMeToken {
  id         String    @id @default(cuid())
  userId     String
  tokenHash  String    @unique @map("token_hash")
  deviceInfo String?   @map("device_info")
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  lastUsedAt DateTime? @map("last_used_at")
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId, expiresAt])
  @@index([expiresAt])
  @@map("remember_me_tokens")
}

model TemporaryAuthToken {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  tokenHash     String    @unique @map("token_hash")
  challengeType String    @map("challenge_type")
  used          Boolean   @default(false)
  usedAt        DateTime? @map("used_at")
  expiresAt     DateTime  @map("expires_at")
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@index([userId, used])
  @@map("temporary_auth_tokens")
}

model TrustedDevice {
  id                String    @id @default(cuid())
  userId            String    @map("user_id")
  tokenHash         String    @unique @map("token_hash")
  deviceName        String?   @map("device_name")
  deviceFingerprint String?   @map("device_fingerprint")
  ipAddress         String?   @map("ip_address")
  userAgent         String?   @map("user_agent")
  lastUsedAt        DateTime? @map("last_used_at")
  expiresAt         DateTime  @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@index([userId, expiresAt])
  @@map("trusted_devices")
}

model LoginAttempt {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  email             String
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  deviceFingerprint String?  @map("device_fingerprint")
  success           Boolean  @default(false)
  failureReason     String?  @map("failure_reason")
  requiresCaptcha   Boolean  @default(false) @map("requires_captcha")
  captchaVerified   Boolean? @map("captcha_verified")
  locationCountry   String?  @map("location_country")
  locationRegion    String?  @map("location_region")
  locationCity      String?  @map("location_city")
  isAnomalous       Boolean  @default(false) @map("is_anomalous")
  anomalyReasons    String[] @map("anomaly_reasons")
  timestamp         DateTime @default(now())
  createdAt         DateTime @default(now()) @map("created_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp(sort: Desc)])
  @@index([email, timestamp(sort: Desc)])
  @@index([ipAddress, timestamp(sort: Desc)])
  @@index([success, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([deviceFingerprint])
  @@map("login_attempts")
}

model StepUpToken {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  tokenHash           String    @unique @map("token_hash")
  actionType          String    @map("action_type")
  elevatedPermissions String[]  @map("elevated_permissions")
  used                Boolean   @default(false)
  usedAt              DateTime? @map("used_at")
  expiresAt           DateTime  @map("expires_at")
  ipAddress           String?   @map("ip_address")
  userAgent           String?   @map("user_agent")
  createdAt           DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([userId, used])
  @@map("step_up_tokens")
}

model SensitiveActionLog {
  id                 String   @id @default(cuid())
  userId             String   @map("user_id")
  actionType         String   @map("action_type")
  actionDetails      Json?    @map("action_details")
  required2fa        Boolean  @default(false) @map("required_2fa")
  requiredStepUp     Boolean  @default(false) @map("required_step_up")
  verificationMethod String?  @map("verification_method")
  ipAddress          String?  @map("ip_address")
  userAgent          String?  @map("user_agent")
  success            Boolean
  failureReason      String?  @map("failure_reason")
  createdAt          DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt(sort: Desc)])
  @@index([actionType, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("sensitive_action_logs")
}

model AdminRole {
  id              String     @id @default(cuid())
  userId          String     @map("user_id")
  department      Department
  seniority       Seniority
  permissions     Json       @default("[]")
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  createdBy       String     @map("created_by")
  expiresAt       DateTime?  @map("expires_at")
  deletedAt       DateTime?  @map("deleted_at")
  deletedBy       String?    @map("deleted_by")
  deletionReason  String?    @map("deletion_reason")
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, department])
  @@index([userId])
  @@index([department])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdBy])
  @@index([userId, isActive])
  @@index([department, isActive])
  @@index([deletedAt])
  @@index([userId, deletedAt])
  @@map("admin_roles")
}

model TwoFactorPolicy {
  id                   String                   @id @default(cuid())
  role                 UserRole                 @unique
  enforcementType      TwoFactorEnforcementType @default(OPTIONAL) @map("enforcement_type")
  gracePeriodDays      Int                      @default(30) @map("grace_period_days")
  enforcementStartDate DateTime?                @map("enforcement_start_date")
  allowedMethods       TwoFactorMethod[]        @map("allowed_methods")
  createdAt            DateTime                 @default(now()) @map("created_at")
  updatedAt            DateTime                 @updatedAt @map("updated_at")
  createdBy            String?                  @map("created_by")
  updatedBy            String?                  @map("updated_by")

  @@index([role])
  @@index([enforcementType])
  @@map("two_factor_policies")
}

model AdminEmergencyCode {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  codeHash    String    @map("code_hash")
  generatedBy String    @map("generated_by")
  reason      String?
  used        Boolean   @default(false)
  usedAt      DateTime? @map("used_at")
  expiresAt   DateTime  @map("expires_at")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  createdAt   DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([userId, used])
  @@index([expiresAt])
  @@index([generatedBy])
  @@map("admin_emergency_codes")
}

model ApprovalRequest {
  id             String         @id @default(cuid())
  actionType     String         @map("action_type")
  requestedBy    String         @map("requested_by")
  department     Department
  dataPayload    Json           @map("data_payload")
  status         ApprovalStatus @default(PENDING)
  reviewedBy     String?        @map("reviewed_by")
  reviewedAt     DateTime?      @map("reviewed_at")
  reviewComments String?        @map("review_comments")
  createdAt      DateTime       @default(now()) @map("created_at")
  metadata       Json?

  @@index([actionType])
  @@index([requestedBy])
  @@index([department])
  @@index([status])
  @@index([reviewedBy])
  @@index([createdAt(sort: Desc)])
  @@index([status, department])
  @@index([actionType, createdAt(sort: Desc)])
  @@map("approval_requests")
}

model TwoFactorSecurityLog {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  adminId         String?  @map("admin_id")
  eventType       String   @map("event_type")
  action          String
  success         Boolean  @default(true)
  failureReason   String?  @map("failure_reason")
  metadata        Json?
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  deviceInfo      String?  @map("device_info")
  locationCountry String?  @map("location_country")
  locationCity    String?  @map("location_city")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt(sort: Desc)])
  @@index([adminId, createdAt(sort: Desc)])
  @@index([eventType, createdAt(sort: Desc)])
  @@index([action, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("two_factor_security_logs")
}

model AuditEvent {
  id                String        @id @default(cuid())
  timestamp         DateTime      @default(now()) @db.Timestamptz(6)
  email             String?
  action            String
  afterJson         Json?         @map("after_json")
  afterState        Json?         @map("after_state")
  beforeJson        Json?         @map("before_json")
  beforeState       Json?         @map("before_state")
  entityId          String        @default("") @map("entity_id")
  entityType        String        @default("") @map("entity_type")
  ipAddress         String?       @map("ip_address")
  metadata          Json?
  permission        String?
  previousLogHash   String?       @map("previous_log_hash")
  requestId         String?       @map("request_id")
  resourceId        String?       @map("resource_id")
  resourceType      ResourceType? @map("resource_type")
  sessionId         String?       @map("session_id")
  userAgent         String?       @map("user_agent")
  userId            String?       @map("user_id")
  
  // Security enhancements
  encryptedMetadata String?       @map("encrypted_metadata") // Encrypted sensitive PII/financial data
  entryHash         String?       @map("entry_hash")         // SHA-256 hash of this entry for integrity
  
  // Archival tracking
  archived          Boolean       @default(false)
  archivedAt        DateTime?     @map("archived_at")
  
  user              User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp(sort: Desc)])
  @@index([resourceType, resourceId, timestamp(sort: Desc)])
  @@index([entityType, entityId])
  @@index([action, timestamp(sort: Desc)])
  @@index([sessionId, timestamp(sort: Desc)])
  @@index([email])
  @@index([requestId])
  @@index([timestamp(sort: Desc)])
  @@index([archived, timestamp(sort: Desc)])
  @@index([entryHash])
  @@map("audit_events")
}

model AuditEventArchive {
  id                String        @id @default(cuid())
  timestamp         DateTime      @db.Timestamptz(6)
  email             String?
  action            String
  afterJson         Json?         @map("after_json")
  afterState        Json?         @map("after_state")
  beforeJson        Json?         @map("before_json")
  beforeState       Json?         @map("before_state")
  entityId          String        @default("") @map("entity_id")
  entityType        String        @default("") @map("entity_type")
  ipAddress         String?       @map("ip_address")
  metadata          Json?
  permission        String?
  previousLogHash   String?       @map("previous_log_hash")
  requestId         String?       @map("request_id")
  resourceId        String?       @map("resource_id")
  resourceType      ResourceType? @map("resource_type")
  sessionId         String?       @map("session_id")
  userAgent         String?       @map("user_agent")
  userId            String?       @map("user_id")
  encryptedMetadata String?       @map("encrypted_metadata")
  entryHash         String?       @map("entry_hash")
  
  // Archive metadata
  archivedAt        DateTime      @default(now()) @map("archived_at")
  originalId        String        @map("original_id") // Original ID from audit_events
  
  @@index([userId, timestamp(sort: Desc)])
  @@index([resourceType, resourceId, timestamp(sort: Desc)])
  @@index([entityType, entityId])
  @@index([action, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([archivedAt(sort: Desc)])
  @@index([originalId])
  @@map("audit_events_archive")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Creator {
  id                        String                     @id @default(cuid())
  userId                    String                     @unique
  stageName                 String
  bio                       String?
  specialties               Json
  socialLinks               Json?
  stripeAccountId           String?                    @unique
  onboardingStatus          String                     @default("pending")
  portfolioUrl              String?
  website                   String?
  availability              Json?
  preferences               Json?
  verificationStatus        String                     @default("pending")
  verifiedAt                DateTime?
  performanceMetrics        Json?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  deletedAt                 DateTime?
  payables                  AccountsPayableEntry[]     @relation("CreatorPayables")
  annualTaxSummaries        AnnualTaxSummary[]
  user                      User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipOwnerships              IpOwnership[]
  paymentThresholds         PaymentThreshold[]
  payouts                   Payout[]
  royaltyStatements         RoyaltyStatement[]
  stripeAccountCapabilities StripeAccountCapability[]
  stripeAccountRequirements StripeAccountRequirement[]
  stripeOnboardingSessions  StripeOnboardingSession[]
  taxDocuments              TaxDocument[]
  taxJurisdictions          TaxJurisdiction[]
  taxWithholdings           TaxWithholding[]

  @@index([verificationStatus])
  @@index([onboardingStatus])
  @@index([userId])
  @@index([deletedAt])
  @@index([verificationStatus, createdAt(sort: Desc)])
  @@index([verifiedAt(sort: Desc)])
  @@index([onboardingStatus, verificationStatus])
  @@map("creators")
}

model StripeOnboardingSession {
  id              String    @id @default(cuid())
  creatorId       String    @map("creator_id")
  stripeAccountId String    @map("stripe_account_id")
  accountLinkUrl  String    @map("account_link_url")
  returnUrl       String    @map("return_url")
  refreshUrl      String    @map("refresh_url")
  expiresAt       DateTime  @map("expires_at")
  completedAt     DateTime? @map("completed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  creator         Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([stripeAccountId])
  @@index([expiresAt])
  @@index([completedAt])
  @@map("stripe_onboarding_sessions")
}

model StripeAccountCapability {
  id              String    @id @default(cuid())
  creatorId       String    @map("creator_id")
  stripeAccountId String    @map("stripe_account_id")
  capability      String
  status          String
  requestedAt     DateTime? @map("requested_at")
  enabledAt       DateTime? @map("enabled_at")
  disabledAt      DateTime? @map("disabled_at")
  restrictions    Json?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  creator         Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([stripeAccountId, capability])
  @@index([creatorId])
  @@index([stripeAccountId])
  @@index([status])
  @@map("stripe_account_capabilities")
}

model StripeAccountRequirement {
  id              String    @id @default(cuid())
  creatorId       String    @map("creator_id")
  stripeAccountId String    @map("stripe_account_id")
  requirementType String    @map("requirement_type")
  fieldName       String    @map("field_name")
  deadline        DateTime?
  resolvedAt      DateTime? @map("resolved_at")
  errorCode       String?   @map("error_code")
  errorReason     String?   @map("error_reason")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  creator         Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([stripeAccountId, fieldName])
  @@index([creatorId])
  @@index([stripeAccountId])
  @@index([requirementType])
  @@index([resolvedAt])
  @@map("stripe_account_requirements")
}

model Talent {
  id               String                 @id @default(cuid())
  userId           String                 @unique
  stageName        String
  bio              String
  socialMediaLinks Json?
  categories       String[]
  isVerified       Boolean                @default(false)
  rating           Float                  @default(0)
  totalEarnings    Decimal                @default(0) @db.Decimal(10, 2)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  ips              IntellectualProperty[]
  royalties        Royalty[]
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("talents")
}

model Brand {
  id                 String                    @id @default(cuid())
  userId             String                    @unique
  companyName        String                    @db.VarChar(255)
  industry           String?                   @db.VarChar(100)
  website            String?
  description        String?
  logo               String?
  isVerified         Boolean                   @default(false)
  totalSpent         Decimal                   @default(0) @db.Decimal(10, 2)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  billingInfo        Json?
  brandGuidelinesUrl String?
  companySize        Json?
  contactInfo        Json?
  deletedAt          DateTime?
  targetAudience     Json?
  teamMembers        Json?
  verificationNotes  String?
  verificationStatus String                    @default("pending")
  verifiedAt         DateTime?
  receivables        AccountsReceivableAging[] @relation("BrandReceivables")
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  licenses           License[]
  payments           Payment[]
  projects           Project[]

  @@index([companyName])
  @@index([industry])
  @@index([verificationStatus])
  @@index([deletedAt])
  @@index([userId])
  @@index([createdAt])
  @@map("brands")
}

model Project {
  id             String          @id @default(cuid())
  brandId        String
  name           String          @db.VarChar(200)
  description    String?
  status         ProjectStatus   @default(DRAFT)
  budgetCents    Int             @default(0)
  startDate      DateTime?
  endDate        DateTime?
  objectives     Json?
  requirements   Json?
  metadata       Json?
  projectType    ProjectType     @default(CAMPAIGN)
  createdBy      String
  updatedBy      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  dailyMetrics   DailyMetric[]
  events         Event[]
  ipAssets       IpAsset[]
  licenses       License[]
  monthlyMetrics MonthlyMetric[]
  brand          Brand           @relation(fields: [brandId], references: [id])
  creatorUser    User            @relation("ProjectCreatedBy", fields: [createdBy], references: [id])
  updaterUser    User?           @relation("ProjectUpdatedBy", fields: [updatedBy], references: [id])
  weeklyMetrics  WeeklyMetric[]

  @@index([brandId, status])
  @@index([createdAt])
  @@index([deletedAt])
  @@index([status])
  @@index([projectType])
  @@map("projects")
}

model Event {
  id          String       @id @default(cuid())
  occurredAt  DateTime     @default(now()) @map("occurred_at")
  source      String       @db.VarChar(50)
  eventType   String       @map("event_type") @db.VarChar(100)
  actorType   String?      @map("actor_type") @db.VarChar(50)
  actorId     String?      @map("actor_id")
  projectId   String?      @map("project_id")
  ipAssetId   String?      @map("ip_asset_id")
  licenseId   String?      @map("license_id")
  postId      String?      @map("post_id")
  userId      String?
  brandId     String?
  creatorId   String?
  propsJson   Json         @default("{}") @map("props_json")
  sessionId   String?      @map("session_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  attribution Attribution?
  ipAsset     IpAsset?     @relation(fields: [ipAssetId], references: [id])
  license     License?     @relation(fields: [licenseId], references: [id])
  post        Post?        @relation(fields: [postId], references: [id])
  project     Project?     @relation(fields: [projectId], references: [id])

  @@index([occurredAt])
  @@index([eventType, occurredAt])
  @@index([actorId, occurredAt])
  @@index([projectId, occurredAt])
  @@index([ipAssetId, occurredAt])
  @@index([licenseId, occurredAt])
  @@index([postId, occurredAt])
  @@index([sessionId])
  @@index([createdAt])
  @@map("events")
}

model Attribution {
  id          String   @id @default(cuid())
  eventId     String   @unique @map("event_id")
  utmSource   String?  @map("utm_source") @db.VarChar(255)
  utmMedium   String?  @map("utm_medium") @db.VarChar(255)
  utmCampaign String?  @map("utm_campaign") @db.VarChar(255)
  utmTerm     String?  @map("utm_term") @db.VarChar(255)
  utmContent  String?  @map("utm_content") @db.VarChar(255)
  referrer    String?
  landingPage String?  @map("landing_page")
  deviceType  String?  @map("device_type") @db.VarChar(50)
  browser     String?  @db.VarChar(100)
  os          String?  @db.VarChar(100)
  createdAt   DateTime @default(now()) @map("created_at")
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([utmSource, utmMedium, utmCampaign])
  @@index([referrer])
  @@map("attribution")
}

model DailyMetric {
  id             String   @id @default(cuid())
  date           DateTime @db.Date
  projectId      String?  @map("project_id")
  ipAssetId      String?  @map("ip_asset_id")
  licenseId      String?  @map("license_id")
  views          Int      @default(0)
  clicks         Int      @default(0)
  conversions    Int      @default(0)
  revenueCents   Int      @default(0) @map("revenue_cents")
  uniqueVisitors Int      @default(0) @map("unique_visitors")
  engagementTime Int      @default(0) @map("engagement_time")
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  ipAsset        IpAsset? @relation(fields: [ipAssetId], references: [id])
  license        License? @relation(fields: [licenseId], references: [id])
  project        Project? @relation(fields: [projectId], references: [id])

  @@unique([date, projectId, ipAssetId, licenseId])
  @@index([date])
  @@index([projectId, date])
  @@index([ipAssetId, date])
  @@index([licenseId, date])
  @@map("daily_metrics")
}

model IntellectualProperty {
  id          String   @id @default(cuid())
  name        String
  description String
  type        IPType
  category    String
  tags        String[]
  metadata    Json?
  isActive    Boolean  @default(true)
  talentId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  talent      Talent   @relation(fields: [talentId], references: [id], onDelete: Cascade)
  files       IPFile[]

  @@map("intellectual_properties")
}

model IPFile {
  id           String               @id @default(cuid())
  url          String
  type         String
  size         Int
  originalName String
  mimeType     String
  ipId         String
  createdAt    DateTime             @default(now())
  ip           IntellectualProperty @relation(fields: [ipId], references: [id], onDelete: Cascade)

  @@map("ip_files")
}

model License {
  id                    String                       @id @default(cuid())
  status                LicenseStatus                @default(DRAFT)
  autoRenew             Boolean                      @default(false) @map("auto_renew")
  billingFrequency      BillingFrequency?            @map("billing_frequency")
  brandId               String                       @map("brand_id")
  createdAt             DateTime                     @default(now()) @map("created_at")
  createdBy             String?                      @map("created_by")
  deletedAt             DateTime?                    @map("deleted_at")
  endDate               DateTime                     @map("end_date")
  feeCents              Int                          @default(0) @map("fee_cents")
  ipAssetId             String                       @map("ip_asset_id")
  licenseType           LicenseType                  @map("license_type")
  metadata              Json?
  parentLicenseId       String?                      @map("parent_license_id")
  paymentTerms          String?                      @map("payment_terms")
  projectId             String?                      @map("project_id")
  renewalNotifiedAt     DateTime?                    @map("renewal_notified_at")
  revShareBps           Int                          @default(0) @map("rev_share_bps")
  scopeJson             Json                         @map("scope_json")
  signatureProof        String?                      @map("signature_proof")
  signedAt              DateTime?                    @map("signed_at")
  startDate             DateTime                     @map("start_date")
  updatedAt             DateTime                     @updatedAt @map("updated_at")
  updatedBy             String?                      @map("updated_by")
  amendmentCount        Int                          @default(0) @map("amendment_count")
  extensionCount        Int                          @default(0) @map("extension_count")
  ninetyDayNoticeSentAt DateTime?                    @map("ninety_day_notice_sent_at")
  sixtyDayNoticeSentAt  DateTime?                    @map("sixty_day_notice_sent_at")
  thirtyDayNoticeSentAt DateTime?                    @map("thirty_day_notice_sent_at")
  gracePeriodEndDate    DateTime?                    @map("grace_period_end_date")
  expiredAt             DateTime?                    @map("expired_at")
  gracePeriodDays       Int                          @default(0) @map("grace_period_days")
  usageTrackingEnabled  Boolean                      @default(true) @map("usage_tracking_enabled")
  lastUsageAt           DateTime?                    @map("last_usage_at")
  totalUsageEvents      Int                          @default(0) @map("total_usage_events")
  commissions           CommissionTracking[]         @relation("LicenseCommissions")
  dailyMetrics          DailyMetric[]
  events                Event[]
  amendments            LicenseAmendment[]
  extensions            LicenseExtension[]
  statusHistory         LicenseStatusHistory[]
  usageAggregates       LicenseUsageDailyAggregate[]
  usageEvents           LicenseUsageEvent[]
  usageForecasts        LicenseUsageForecast[]
  usageOverages         LicenseUsageOverage[]
  usageThresholds       LicenseUsageThreshold[]
  brand                 Brand                        @relation(fields: [brandId], references: [id])
  ipAsset               IpAsset                      @relation(fields: [ipAssetId], references: [id])
  parentLicense         License?                     @relation("LicenseRenewals", fields: [parentLicenseId], references: [id])
  renewals              License[]                    @relation("LicenseRenewals")
  project               Project?                     @relation(fields: [projectId], references: [id])
  monthlyMetrics        MonthlyMetric[]
  royaltyLines          RoyaltyLine[]
  weeklyMetrics         WeeklyMetric[]

  @@index([ipAssetId, status, endDate])
  @@index([brandId, status])
  @@index([status, endDate])
  @@index([deletedAt])
  @@index([projectId])
  @@index([usageTrackingEnabled, lastUsageAt])
  @@map("licenses")
}

model LicenseAmendment {
  id               String                     @id @default(cuid())
  licenseId        String                     @map("license_id")
  amendmentNumber  Int                        @map("amendment_number")
  proposedBy       String                     @map("proposed_by")
  proposedByRole   String                     @map("proposed_by_role")
  proposedAt       DateTime                   @default(now()) @map("proposed_at")
  approvedAt       DateTime?                  @map("approved_at")
  rejectedAt       DateTime?                  @map("rejected_at")
  status           LicenseAmendmentStatus     @default(PROPOSED)
  amendmentType    LicenseAmendmentType       @map("amendment_type")
  justification    String
  fieldsChanged    Json                       @default("[]") @map("fields_changed")
  beforeValues     Json                       @default("{}") @map("before_values")
  afterValues      Json                       @default("{}") @map("after_values")
  approvalDeadline DateTime?                  @map("approval_deadline")
  rejectionReason  String?                    @map("rejection_reason")
  createdAt        DateTime                   @default(now()) @map("created_at")
  updatedAt        DateTime                   @updatedAt @map("updated_at")
  approvals        LicenseAmendmentApproval[]
  license          License                    @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, amendmentNumber])
  @@index([licenseId])
  @@index([status])
  @@index([proposedAt])
  @@map("license_amendments")
}

model LicenseAmendmentApproval {
  id           String           @id @default(cuid())
  amendmentId  String           @map("amendment_id")
  approverId   String           @map("approver_id")
  approverRole String           @map("approver_role")
  status       ApprovalStatus   @default(PENDING)
  approvedAt   DateTime?        @map("approved_at")
  rejectedAt   DateTime?        @map("rejected_at")
  comments     String?
  ipAddress    String?          @map("ip_address")
  userAgent    String?          @map("user_agent")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  amendment    LicenseAmendment @relation(fields: [amendmentId], references: [id], onDelete: Cascade)
  approver     User             @relation(fields: [approverId], references: [id], onDelete: Cascade)

  @@unique([amendmentId, approverId])
  @@index([amendmentId])
  @@index([approverId])
  @@index([status])
  @@map("license_amendment_approvals")
}

model LicenseStatusHistory {
  id             String   @id @default(cuid())
  licenseId      String   @map("license_id")
  fromStatus     String   @map("from_status")
  toStatus       String   @map("to_status")
  transitionedAt DateTime @default(now()) @map("transitioned_at")
  transitionedBy String?  @map("transitioned_by")
  reason         String?
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  license        License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  user           User?    @relation(fields: [transitionedBy], references: [id])

  @@index([licenseId])
  @@index([transitionedAt])
  @@index([fromStatus])
  @@index([toStatus])
  @@map("license_status_history")
}

model LicenseExtension {
  id                 String          @id @default(cuid())
  licenseId          String          @map("license_id")
  requestedBy        String          @map("requested_by")
  requestedAt        DateTime        @default(now()) @map("requested_at")
  approvedAt         DateTime?       @map("approved_at")
  rejectedAt         DateTime?       @map("rejected_at")
  status             ExtensionStatus @default(PENDING)
  originalEndDate    DateTime        @map("original_end_date")
  newEndDate         DateTime        @map("new_end_date")
  extensionDays      Int             @map("extension_days")
  additionalFeeCents Int             @default(0) @map("additional_fee_cents")
  justification      String
  approvalRequired   Boolean         @default(true) @map("approval_required")
  approvedBy         String?         @map("approved_by")
  rejectionReason    String?         @map("rejection_reason")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  approver           User?           @relation("ExtensionApprover", fields: [approvedBy], references: [id])
  license            License         @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  requester          User            @relation("ExtensionRequester", fields: [requestedBy], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([status])
  @@index([requestedAt])
  @@map("license_extensions")
}

model Royalty {
  id          String        @id @default(cuid())
  licenseId   String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  period      RoyaltyPeriod
  periodStart DateTime
  periodEnd   DateTime
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?
  talentId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  talent      Talent        @relation(fields: [talentId], references: [id])

  @@map("royalties")
}

model Payment {
  id                    String               @id @default(cuid())
  amount                Decimal              @db.Decimal(10, 2)
  currency              String               @default("USD")
  status                PaymentStatus        @default(PENDING)
  paymentMethod         String
  stripePaymentIntentId String?
  metadata              Json?
  licenseId             String?
  brandId               String
  paidAt                DateTime?
  refundedAt            DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @map("updated_at")
  commissions           CommissionTracking[] @relation("PaymentCommissions")
  brand                 Brand                @relation(fields: [brandId], references: [id])

  @@map("payments")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  type      String
  userId    String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("analytics_events")
}

model EmailEvent {
  id             String         @id @default(cuid())
  userId         String?
  email          String
  eventType      EmailEventType
  messageId      String
  subject        String?
  templateName   String?
  metadata       Json?
  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  clickedAt      DateTime?
  bouncedAt      DateTime?
  complainedAt   DateTime?
  bounceReason   String?
  clickedUrl     String?
  userAgent      String?
  ipAddress      String?
  uniqueOpen     Boolean?       @default(true) @map("unique_open")
  linkPosition   Int?           @map("link_position")
  geographicData Json?          @map("geographic_data")
  deviceType     String?        @map("device_type")
  emailClient    String?        @map("email_client")
  createdAt      DateTime       @default(now())
  user           User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, eventType])
  @@index([email, eventType])
  @@index([messageId])
  @@index([sentAt])
  @@map("email_events")
}

model EmailPreferences {
  id                          String          @id @default(cuid())
  userId                      String          @unique
  royaltyStatements           Boolean         @default(true)
  licenseExpiry               Boolean         @default(true)
  projectInvitations          Boolean         @default(true)
  messages                    Boolean         @default(true)
  payouts                     Boolean         @default(true)
  digestFrequency             DigestFrequency @default(IMMEDIATE)
  newsletters                 Boolean         @default(true)
  announcements               Boolean         @default(true)
  unsubscribedAt              DateTime?
  globalUnsubscribe           Boolean         @default(false) @map("global_unsubscribe")
  categoryPreferences         Json?           @map("category_preferences")
  frequencyPreference         String          @default("immediate") @map("frequency_preference")
  unsubscribeToken            String?         @unique @map("unsubscribe_token")
  preferenceCenterLastVisited DateTime?       @map("preference_center_last_visited")
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  user                        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([unsubscribeToken])
  @@index([globalUnsubscribe])
  @@map("email_preferences")
}

model EmailSuppression {
  id           String            @id @default(cuid())
  email        String            @unique
  reason       SuppressionReason
  suppressedAt DateTime          @default(now())
  bounceType   String?
  bounceReason String?

  @@index([email])
  @@map("email_suppressions")
}

model EmailReputationMetrics {
  id              String   @id @default(cuid())
  timestamp       DateTime @default(now())
  senderDomain    String   @map("sender_domain")
  bounceRate      Float    @default(0) @map("bounce_rate")
  complaintRate   Float    @default(0) @map("complaint_rate")
  deliveryRate    Float    @default(0) @map("delivery_rate")
  openRate        Float?   @map("open_rate")
  clickRate       Float?   @map("click_rate")
  spamScore       Float?   @map("spam_score")
  reputationScore Int      @default(100) @map("reputation_score")
  blacklistStatus Json?    @map("blacklist_status")
  warnings        Json?
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([timestamp])
  @@index([senderDomain])
  @@index([reputationScore])
  @@map("email_reputation_metrics")
}

model DomainReputationLog {
  id                     String   @id @default(cuid())
  checkedAt              DateTime @default(now()) @map("checked_at")
  domainName             String   @map("domain_name")
  reputationSource       String   @map("reputation_source")
  reputationScore        Float?   @map("reputation_score")
  spamRate               Float?   @map("spam_rate")
  inboxPlacementRate     Float?   @map("inbox_placement_rate")
  authenticationStatus   Json?    @map("authentication_status")
  blacklistStatus        Json?    @map("blacklist_status")
  feedbackLoopComplaints Int?     @map("feedback_loop_complaints")
  reportData             Json?    @map("report_data")
  createdAt              DateTime @default(now()) @map("created_at")

  @@index([checkedAt])
  @@index([domainName])
  @@index([reputationSource])
  @@map("domain_reputation_log")
}

model EmailTest {
  id                             String                @id @default(cuid())
  name                           String
  description                    String?
  status                         EmailTestStatus       @default(DRAFT)
  testType                       String                @map("test_type")
  startDate                      DateTime?             @map("start_date")
  endDate                        DateTime?             @map("end_date")
  variants                       Json
  allocationPercentage           Json                  @map("allocation_percentage")
  winningVariantId               String?               @map("winning_variant_id")
  primaryMetric                  String                @map("primary_metric")
  statisticalSignificanceReached Boolean               @default(false) @map("statistical_significance_reached")
  confidenceLevel                Float?                @map("confidence_level")
  createdAt                      DateTime              @default(now()) @map("created_at")
  updatedAt                      DateTime              @updatedAt @map("updated_at")
  assignments                    EmailTestAssignment[]

  @@index([status])
  @@index([testType])
  @@index([startDate])
  @@map("email_tests")
}

model EmailTestAssignment {
  id          String    @id @default(cuid())
  testId      String    @map("test_id")
  userId      String?   @map("user_id")
  email       String
  variantId   String    @map("variant_id")
  assignedAt  DateTime  @default(now()) @map("assigned_at")
  emailSentId String?   @map("email_sent_id")
  opened      Boolean   @default(false)
  clicked     Boolean   @default(false)
  converted   Boolean   @default(false)
  test        EmailTest @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([testId])
  @@index([userId])
  @@index([variantId])
  @@index([email])
  @@map("email_test_assignments")
}

model ScheduledEmail {
  id                  String               @id @default(cuid())
  emailType           String               @map("email_type")
  recipientUserId     String?              @map("recipient_user_id")
  recipientEmail      String               @map("recipient_email")
  recipientListId     String?              @map("recipient_list_id")
  templateId          String               @map("template_id")
  subject             String
  personalizationData Json?                @map("personalization_data")
  scheduledSendTime   DateTime             @map("scheduled_send_time")
  timezone            String?
  optimizeSendTime    Boolean              @default(false) @map("optimize_send_time")
  status              ScheduledEmailStatus @default(PENDING)
  sentAt              DateTime?            @map("sent_at")
  failedAt            DateTime?            @map("failed_at")
  retryCount          Int                  @default(0) @map("retry_count")
  errorMessage        String?              @map("error_message")
  recurrencePattern   String?              @map("recurrence_pattern")
  nextSendTime        DateTime?            @map("next_send_time")
  parentScheduleId    String?              @map("parent_schedule_id")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @map("updated_at")
  recipientUser       User?                @relation(fields: [recipientUserId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([scheduledSendTime])
  @@index([recipientUserId])
  @@index([recipientEmail])
  @@index([emailType])
  @@map("scheduled_emails")
}

model EmailPersonalizationVariable {
  id                  String   @id @default(cuid())
  variableName        String   @unique @map("variable_name")
  dataType            String   @map("data_type")
  defaultValue        String?  @map("default_value")
  description         String?
  formattingRules     Json?    @map("formatting_rules")
  isRequired          Boolean  @default(false) @map("is_required")
  applicableUserTypes String[] @map("applicable_user_types")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@index([variableName])
  @@map("email_personalization_variables")
}

model EmailCampaignAnalytics {
  id                  String    @id @default(cuid())
  campaignId          String    @unique @map("campaign_id")
  campaignName        String    @map("campaign_name")
  campaignType        String    @map("campaign_type")
  sentCount           Int       @default(0) @map("sent_count")
  deliveredCount      Int       @default(0) @map("delivered_count")
  bouncedCount        Int       @default(0) @map("bounced_count")
  openedCount         Int       @default(0) @map("opened_count")
  uniqueOpenedCount   Int       @default(0) @map("unique_opened_count")
  clickedCount        Int       @default(0) @map("clicked_count")
  uniqueClickedCount  Int       @default(0) @map("unique_clicked_count")
  unsubscribedCount   Int       @default(0) @map("unsubscribed_count")
  complainedCount     Int       @default(0) @map("complained_count")
  deliveryRate        Float?    @map("delivery_rate")
  openRate            Float?    @map("open_rate")
  clickRate           Float?    @map("click_rate")
  clickToOpenRate     Float?    @map("click_to_open_rate")
  unsubscribeRate     Float?    @map("unsubscribe_rate")
  complaintRate       Float?    @map("complaint_rate")
  linkPerformance     Json?     @map("link_performance")
  deviceBreakdown     Json?     @map("device_breakdown")
  geographicBreakdown Json?     @map("geographic_breakdown")
  sentAt              DateTime? @map("sent_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @map("updated_at")

  @@index([campaignId])
  @@index([sentAt])
  @@index([campaignType])
  @@map("email_campaign_analytics")
}

model EmailUnsubscribeLog {
  id                  String   @id @default(cuid())
  userId              String?  @map("user_id")
  email               String
  unsubscribeAction   String   @map("unsubscribe_action")
  unsubscribeSource   String   @map("unsubscribe_source")
  campaignId          String?  @map("campaign_id")
  categoriesAffected  String[] @map("categories_affected")
  previousPreferences Json?    @map("previous_preferences")
  newPreferences      Json?    @map("new_preferences")
  userAgent           String?  @map("user_agent")
  ipAddress           String?  @map("ip_address")
  createdAt           DateTime @default(now()) @map("created_at")
  user                User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@index([createdAt])
  @@map("email_unsubscribe_log")
}

model EmailCampaign {
  id                 String              @id @default(cuid())
  name               String              @db.VarChar(255)
  description        String?
  createdBy          String              @map("created_by")
  status             EmailCampaignStatus @default(DRAFT)
  templateId         String              @map("template_id")
  subject            String              @db.VarChar(500)
  previewText        String?             @map("preview_text") @db.VarChar(200)
  segmentCriteria    Json?               @map("segment_criteria")
  recipientCount     Int                 @default(0) @map("recipient_count")
  scheduledSendTime  DateTime            @map("scheduled_send_time")
  timezone           String?             @default("UTC")
  sendStartedAt      DateTime?           @map("send_started_at")
  sendCompletedAt    DateTime?           @map("send_completed_at")
  messagesPerHour    Int                 @default(1000) @map("messages_per_hour")
  batchSize          Int                 @default(100) @map("batch_size")
  sentCount          Int                 @default(0) @map("sent_count")
  deliveredCount     Int                 @default(0) @map("delivered_count")
  openedCount        Int                 @default(0) @map("opened_count")
  clickedCount       Int                 @default(0) @map("clicked_count")
  bouncedCount       Int                 @default(0) @map("bounced_count")
  unsubscribedCount  Int                 @default(0) @map("unsubscribed_count")
  complainedCount    Int                 @default(0) @map("complained_count")
  failedCount        Int                 @default(0) @map("failed_count")
  tags               String[]            @default([])
  metadata           Json?
  cancelledAt        DateTime?           @map("cancelled_at")
  cancelledBy        String?             @map("cancelled_by")
  cancellationReason String?             @map("cancellation_reason")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @default(now()) @map("updated_at")
  recipients         CampaignRecipient[]
  creator            User                @relation("CampaignCreatedBy", fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([status])
  @@index([scheduledSendTime])
  @@index([createdAt])
  @@map("email_campaigns")
}

model CampaignRecipient {
  id                  String                  @id @default(cuid())
  campaignId          String                  @map("campaign_id")
  userId              String?                 @map("user_id")
  email               String
  status              CampaignRecipientStatus @default(PENDING)
  sentAt              DateTime?               @map("sent_at")
  deliveredAt         DateTime?               @map("delivered_at")
  openedAt            DateTime?               @map("opened_at")
  firstClickedAt      DateTime?               @map("first_clicked_at")
  bouncedAt           DateTime?               @map("bounced_at")
  unsubscribedAt      DateTime?               @map("unsubscribed_at")
  complainedAt        DateTime?               @map("complained_at")
  errorMessage        String?                 @map("error_message")
  retryCount          Int                     @default(0) @map("retry_count")
  personalizationData Json?                   @map("personalization_data")
  messageId           String?                 @map("message_id")
  createdAt           DateTime                @default(now()) @map("created_at")
  updatedAt           DateTime                @default(now()) @map("updated_at")
  campaign            EmailCampaign           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user                User?                   @relation(fields: [userId], references: [id])

  @@index([campaignId, status])
  @@index([userId])
  @@index([email])
  @@index([status])
  @@map("campaign_recipients")
}

model SavedEmailSegment {
  id               String    @id @default(cuid())
  name             String    @db.VarChar(255)
  description      String?
  criteria         Json
  estimatedSize    Int?      @map("estimated_size")
  lastCalculatedAt DateTime? @map("last_calculated_at")
  createdBy        String    @map("created_by")
  isPublic         Boolean   @default(false) @map("is_public")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")

  @@index([createdBy])
  @@index([isPublic])
  @@map("saved_email_segments")
}

model EmailCampaignClick {
  id             String   @id @default(cuid())
  campaignId     String   @map("campaign_id")
  recipientId    String?  @map("recipient_id")
  email          String
  clickedUrl     String   @map("clicked_url")
  linkPosition   Int?     @map("link_position")
  clickedAt      DateTime @default(now()) @map("clicked_at")
  userAgent      String?  @map("user_agent")
  ipAddress      String?  @map("ip_address")
  deviceType     String?  @map("device_type")
  geographicData Json?    @map("geographic_data")

  @@index([campaignId])
  @@index([recipientId])
  @@index([clickedAt])
  @@map("email_campaign_clicks")
}

model EmailCampaignReport {
  id                  String   @id @default(cuid())
  campaignId          String   @unique @map("campaign_id")
  reportType          String   @map("report_type")
  metrics             Json
  deviceBreakdown     Json?    @map("device_breakdown")
  geographicBreakdown Json?    @map("geographic_breakdown")
  hourlyBreakdown     Json?    @map("hourly_breakdown")
  linkPerformance     Json?    @map("link_performance")
  generatedAt         DateTime @default(now()) @map("generated_at")
  lastUpdatedAt       DateTime @updatedAt @map("last_updated_at")

  @@index([generatedAt])
  @@map("email_campaign_reports")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model IpAsset {
  id                  String             @id @default(cuid())
  projectId           String?            @map("project_id")
  title               String             @db.VarChar(255)
  description         String?
  type                AssetType
  storageKey          String             @unique @map("storage_key")
  fileSize            BigInt             @map("file_size")
  mimeType            String             @map("mime_type") @db.VarChar(100)
  thumbnailUrl        String?            @map("thumbnail_url")
  previewUrl          String?            @map("preview_url")
  version             Int                @default(1)
  parentAssetId       String?            @map("parent_asset_id")
  metadata            Json?
  status              AssetStatus        @default(DRAFT)
  scanStatus          ScanStatus         @default(PENDING) @map("scan_status")
  scanResult          Json?              @map("scan_result")
  createdBy           String             @map("created_by")
  updatedBy           String?            @map("updated_by")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  deletedAt           DateTime?          @map("deleted_at")
  dailyMetrics        DailyMetric[]
  events              Event[]
  sourceRelationships FileRelationship[] @relation("SourceRelationships")
  targetRelationships FileRelationship[] @relation("TargetRelationships")
  creator             User               @relation("AssetCreator", fields: [createdBy], references: [id])
  parentAsset         IpAsset?           @relation("AssetDerivatives", fields: [parentAssetId], references: [id], onDelete: Restrict)
  derivatives         IpAsset[]          @relation("AssetDerivatives")
  project             Project?           @relation(fields: [projectId], references: [id])
  updater             User?              @relation("AssetUpdater", fields: [updatedBy], references: [id])
  ownerships          IpOwnership[]
  licenses            License[]
  monthlyMetrics      MonthlyMetric[]
  royaltyLines        RoyaltyLine[]
  weeklyMetrics       WeeklyMetric[]

  @@index([projectId, status])
  @@index([createdBy, status])
  @@index([type, status])
  @@index([storageKey])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("ip_assets")
}

model FileRelationship {
  id               String    @id @default(cuid())
  sourceAssetId    String    @map("source_asset_id")
  targetAssetId    String    @map("target_asset_id")
  relationshipType String    @map("relationship_type")
  metadata         Json      @default("{}")
  createdAt        DateTime  @default(now()) @map("created_at")
  deletedAt        DateTime? @map("deleted_at")
  sourceAsset      IpAsset   @relation("SourceRelationships", fields: [sourceAssetId], references: [id], onDelete: Cascade)
  targetAsset      IpAsset   @relation("TargetRelationships", fields: [targetAssetId], references: [id], onDelete: Cascade)

  @@unique([sourceAssetId, targetAssetId, relationshipType, deletedAt])
  @@index([sourceAssetId])
  @@index([targetAssetId])
  @@index([relationshipType])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("file_relationships")
}

model IpOwnership {
  id                String        @id @default(cuid())
  ipAssetId         String        @map("ip_asset_id")
  creatorId         String        @map("creator_id")
  shareBps          Int           @map("share_bps")
  ownershipType     OwnershipType @default(PRIMARY) @map("ownership_type")
  startDate         DateTime      @default(now()) @map("start_date")
  endDate           DateTime?     @map("end_date")
  contractReference String?       @map("contract_reference")
  legalDocUrl       String?       @map("legal_doc_url")
  notes             Json?
  disputed          Boolean       @default(false)
  disputedAt        DateTime?     @map("disputed_at")
  disputeReason     String?       @map("dispute_reason")
  disputedBy        String?       @map("disputed_by")
  resolvedAt        DateTime?     @map("resolved_at")
  resolvedBy        String?       @map("resolved_by")
  resolutionNotes   String?       @map("resolution_notes")
  createdBy         String        @map("created_by")
  updatedBy         String        @map("updated_by")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdByUser     User          @relation("IpOwnershipCreatedBy", fields: [createdBy], references: [id])
  creator           Creator       @relation(fields: [creatorId], references: [id])
  ipAsset           IpAsset       @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  updatedByUser     User          @relation("IpOwnershipUpdatedBy", fields: [updatedBy], references: [id])

  @@index([ipAssetId, startDate, endDate])
  @@index([creatorId])
  @@index([ownershipType])
  @@index([disputed])
  @@map("ip_ownerships")
}

model RoyaltyRun {
  id                  String             @id @default(cuid())
  periodStart         DateTime           @map("period_start")
  periodEnd           DateTime           @map("period_end")
  status              RoyaltyRunStatus   @default(DRAFT)
  totalRevenueCents   Int                @default(0) @map("total_revenue_cents")
  totalRoyaltiesCents Int                @default(0) @map("total_royalties_cents")
  processedAt         DateTime?          @map("processed_at")
  lockedAt            DateTime?          @map("locked_at")
  createdBy           String             @map("created_by")
  notes               String?
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @default(now()) @map("updated_at")
  creator             User               @relation("RoyaltyRunCreatedBy", fields: [createdBy], references: [id])
  statements          RoyaltyStatement[]

  @@index([periodStart, periodEnd])
  @@index([status])
  @@index([createdAt])
  @@map("royalty_runs")
}

model RoyaltyStatement {
  id                 String                 @id @default(cuid())
  royaltyRunId       String                 @map("royalty_run_id")
  creatorId          String                 @map("creator_id")
  totalEarningsCents Int                    @default(0) @map("total_earnings_cents")
  platformFeeCents   Int                    @default(0) @map("platform_fee_cents")
  netPayableCents    Int                    @default(0) @map("net_payable_cents")
  status             RoyaltyStatementStatus @default(PENDING)
  reviewedAt         DateTime?              @map("reviewed_at")
  disputedAt         DateTime?              @map("disputed_at")
  disputeReason      String?                @map("dispute_reason")
  paidAt             DateTime?              @map("paid_at")
  paymentReference   String?                @map("payment_reference")
  pdfStorageKey      String?                @map("pdf_storage_key")
  pdfGeneratedAt     DateTime?              @map("pdf_generated_at")
  metadata           Json?                  @default("{}")
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @updatedAt @map("updated_at")
  payables           AccountsPayableEntry[] @relation("StatementPayables")
  payouts            Payout[]
  lines              RoyaltyLine[]
  creator            Creator                @relation(fields: [creatorId], references: [id])
  royaltyRun         RoyaltyRun             @relation(fields: [royaltyRunId], references: [id])

  @@unique([royaltyRunId, creatorId])
  @@index([creatorId, createdAt])
  @@index([status])
  @@index([pdfStorageKey])
  @@map("royalty_statements")
}

model RoyaltyLine {
  id                     String           @id @default(cuid())
  royaltyStatementId     String           @map("royalty_statement_id")
  licenseId              String           @map("license_id")
  ipAssetId              String           @map("ip_asset_id")
  revenueCents           Int              @map("revenue_cents")
  shareBps               Int              @map("share_bps")
  calculatedRoyaltyCents Int              @map("calculated_royalty_cents")
  periodStart            DateTime         @map("period_start")
  periodEnd              DateTime         @map("period_end")
  metadata               Json?
  createdAt              DateTime         @default(now()) @map("created_at")
  ipAsset                IpAsset          @relation(fields: [ipAssetId], references: [id])
  license                License          @relation(fields: [licenseId], references: [id])
  royaltyStatement       RoyaltyStatement @relation(fields: [royaltyStatementId], references: [id])

  @@index([royaltyStatementId])
  @@index([licenseId])
  @@index([ipAssetId])
  @@map("royalty_lines")
}

model Payout {
  id                 String                 @id @default(cuid())
  creatorId          String                 @map("creator_id")
  royaltyStatementId String?                @map("royalty_statement_id")
  amountCents        Int                    @map("amount_cents")
  stripeTransferId   String?                @unique @map("stripe_transfer_id")
  status             PayoutStatus           @default(PENDING)
  processedAt        DateTime?              @map("processed_at")
  failedReason       String?                @map("failed_reason")
  retryCount         Int                    @default(0) @map("retry_count")
  lastRetryAt        DateTime?              @map("last_retry_at")
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @default(now()) @map("updated_at")
  payables           AccountsPayableEntry[] @relation("PayoutPayables")
  creator            Creator                @relation(fields: [creatorId], references: [id])
  royaltyStatement   RoyaltyStatement?      @relation(fields: [royaltyStatementId], references: [id])

  @@index([creatorId, status])
  @@index([status, createdAt])
  @@index([stripeTransferId])
  @@map("payouts")
}

model StorageMetrics {
  id              String   @id @default(cuid())
  snapshotDate    DateTime @map("snapshot_date") @db.Timestamptz(6)
  entityType      String   @map("entity_type")
  entityId        String?  @map("entity_id")
  totalBytes      BigInt   @default(0) @map("total_bytes")
  fileCount       Int      @default(0) @map("file_count")
  averageFileSize BigInt   @default(0) @map("average_file_size")
  largestFileSize BigInt   @default(0) @map("largest_file_size")
  largestFileId   String?  @map("largest_file_id")
  storageTrendBps Int      @default(0) @map("storage_trend_bps")
  breakdownByType Json     @default("{}") @map("breakdown_by_type")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([snapshotDate, entityType, entityId])
  @@index([snapshotDate(sort: Desc)])
  @@index([entityType, entityId, snapshotDate(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("storage_metrics")
}

model Notification {
  id        String               @id @default(cuid())
  userId    String               @map("user_id")
  type      NotificationType
  title     String               @db.VarChar(255)
  message   String
  actionUrl String?              @map("action_url")
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean              @default(false)
  readAt    DateTime?            @map("read_at")
  metadata  Json?
  createdAt DateTime             @default(now()) @map("created_at")
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt(sort: Desc)])
  @@index([userId, type])
  @@index([createdAt(sort: Desc)])
  @@map("notifications")
}

model MessageThread {
  id               String    @id @default(cuid())
  subject          String?   @db.VarChar(255)
  participantsJson Json      @map("participants_json")
  lastMessageAt    DateTime  @map("last_message_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  messages         Message[]

  @@index([lastMessageAt(sort: Desc)])
  @@index([deletedAt])
  @@map("message_threads")
}

model Message {
  id          String              @id @default(cuid())
  threadId    String              @map("thread_id")
  senderId    String              @map("sender_id")
  recipientId String              @map("recipient_id")
  body        String
  readAt      DateTime?           @map("read_at")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  deletedAt   DateTime?           @map("deleted_at")
  attachments MessageAttachment[]
  recipient   User                @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User                @relation("SentMessages", fields: [senderId], references: [id])
  thread      MessageThread       @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt(sort: Desc)])
  @@index([recipientId, readAt])
  @@index([senderId])
  @@index([deletedAt])
  @@map("messages")
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String   @map("message_id")
  storageKey String   @map("storage_key")
  fileName   String   @map("file_name")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  createdAt  DateTime @default(now()) @map("created_at")
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("message_attachments")
}

model LicenseUsageEvent {
  id                 String   @id @default(cuid())
  licenseId          String   @map("license_id")
  occurredAt         DateTime @default(now()) @map("occurred_at")
  usageType          String   @db.VarChar(50)
  quantity           Int      @default(1)
  geographicLocation String?  @map("geographic_location") @db.VarChar(100)
  platform           String?  @db.VarChar(50)
  deviceType         String?  @map("device_type") @db.VarChar(50)
  referrer           String?
  revenueCents       Int      @default(0) @map("revenue_cents")
  metadata           Json     @default("{}")
  sessionId          String?  @map("session_id")
  idempotencyKey     String?  @unique @map("idempotency_key")
  createdAt          DateTime @default(now()) @map("created_at")
  license            License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId, occurredAt(sort: Desc)])
  @@index([usageType, occurredAt(sort: Desc)])
  @@index([occurredAt(sort: Desc)])
  @@index([sessionId])
  @@map("license_usage_events")
}

model LicenseUsageDailyAggregate {
  id                String   @id @default(cuid())
  licenseId         String   @map("license_id")
  date              DateTime @db.Date
  totalViews        Int      @default(0) @map("total_views")
  totalDownloads    Int      @default(0) @map("total_downloads")
  totalImpressions  Int      @default(0) @map("total_impressions")
  totalClicks       Int      @default(0) @map("total_clicks")
  totalPlays        Int      @default(0) @map("total_plays")
  totalStreams      Int      @default(0) @map("total_streams")
  totalQuantity     Int      @default(0) @map("total_quantity")
  totalRevenueCents Int      @default(0) @map("total_revenue_cents")
  uniqueSessions    Int      @default(0) @map("unique_sessions")
  metadata          Json     @default("{}")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  license           License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, date])
  @@index([licenseId, date(sort: Desc)])
  @@index([date(sort: Desc)])
  @@map("license_usage_daily_aggregates")
}

model LicenseUsageThreshold {
  id               String                @id @default(cuid())
  licenseId        String                @map("license_id")
  usageType        String                @db.VarChar(50)
  limitQuantity    Int                   @map("limit_quantity")
  periodType       String                @db.VarChar(20)
  gracePercentage  Int                   @default(0) @map("grace_percentage")
  warningAt50      Boolean               @default(true) @map("warning_at_50")
  warningAt75      Boolean               @default(true) @map("warning_at_75")
  warningAt90      Boolean               @default(true) @map("warning_at_90")
  warningAt100     Boolean               @default(true) @map("warning_at_100")
  lastWarningLevel Int                   @default(0) @map("last_warning_level")
  lastWarningAt    DateTime?             @map("last_warning_at")
  allowOverage     Boolean               @default(false) @map("allow_overage")
  overageRateCents Int?                  @map("overage_rate_cents")
  isActive         Boolean               @default(true) @map("is_active")
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @default(now()) @map("updated_at")
  overages         LicenseUsageOverage[]
  license          License               @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([usageType])
  @@map("license_usage_thresholds")
}

model LicenseUsageOverage {
  id                 String                @id @default(cuid())
  licenseId          String                @map("license_id")
  thresholdId        String                @map("threshold_id")
  periodStart        DateTime              @map("period_start")
  periodEnd          DateTime              @map("period_end")
  usageType          String                @db.VarChar(50)
  limitQuantity      Int                   @map("limit_quantity")
  actualQuantity     Int                   @map("actual_quantity")
  overageQuantity    Int                   @map("overage_quantity")
  overageRateCents   Int?                  @map("overage_rate_cents")
  calculatedFeeCents Int?                  @map("calculated_fee_cents")
  billedFeeCents     Int?                  @map("billed_fee_cents")
  status             String                @default("DETECTED") @db.VarChar(20)
  approvalRequired   Boolean               @default(false) @map("approval_required")
  approvedBy         String?               @map("approved_by")
  approvedAt         DateTime?             @map("approved_at")
  stripeInvoiceId    String?               @map("stripe_invoice_id")
  billedAt           DateTime?             @map("billed_at")
  notes              String?
  metadata           Json                  @default("{}")
  detectedAt         DateTime              @default(now()) @map("detected_at")
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime              @default(now()) @map("updated_at")
  license            License               @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  threshold          LicenseUsageThreshold @relation(fields: [thresholdId], references: [id], onDelete: Cascade)

  @@index([licenseId, detectedAt(sort: Desc)])
  @@index([status, detectedAt(sort: Desc)])
  @@index([stripeInvoiceId])
  @@map("license_usage_overages")
}

model LicenseUsageForecast {
  id                  String    @id @default(cuid())
  licenseId           String    @map("license_id")
  usageType           String    @db.VarChar(50)
  forecastDate        DateTime  @map("forecast_date") @db.Date
  periodStart         DateTime  @map("period_start") @db.Date
  periodEnd           DateTime  @map("period_end") @db.Date
  predictedQuantity   Int       @map("predicted_quantity")
  lowerBound          Int?      @map("lower_bound")
  upperBound          Int?      @map("upper_bound")
  confidenceLevel     Decimal   @default(0.95) @map("confidence_level") @db.Decimal(3, 2)
  predictedBreachDate DateTime? @map("predicted_breach_date") @db.Date
  breachProbability   Decimal?  @map("breach_probability") @db.Decimal(3, 2)
  forecastingMethod   String    @map("forecasting_method") @db.VarChar(50)
  historicalDaysUsed  Int?      @map("historical_days_used")
  meanAbsoluteError   Decimal?  @map("mean_absolute_error") @db.Decimal(10, 2)
  accuracyScore       Decimal?  @map("accuracy_score") @db.Decimal(3, 2)
  metadata            Json      @default("{}")
  calculatedAt        DateTime  @default(now()) @map("calculated_at")
  createdAt           DateTime  @default(now()) @map("created_at")
  license             License   @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId, forecastDate(sort: Desc)])
  @@index([predictedBreachDate])
  @@map("license_usage_forecasts")
}

model TaxDocument {
  id               String          @id @default(cuid())
  creatorId        String          @map("creator_id")
  taxYear          Int             @map("tax_year")
  documentType     TaxDocumentType @map("document_type")
  totalAmountCents Int             @default(0) @map("total_amount_cents")
  withholdingCents Int             @default(0) @map("withholding_cents")
  filingStatus     TaxFilingStatus @default(PENDING) @map("filing_status")
  pdfStorageKey    String?         @map("pdf_storage_key")
  pdfGeneratedAt   DateTime?       @map("pdf_generated_at")
  filedAt          DateTime?       @map("filed_at")
  correctionOf     String?         @map("correction_of")
  metadata         Json            @default("{}")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  originalDocument TaxDocument?    @relation("TaxDocumentCorrection", fields: [correctionOf], references: [id])
  corrections      TaxDocument[]   @relation("TaxDocumentCorrection")
  creator          Creator         @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, taxYear, documentType])
  @@index([creatorId, taxYear])
  @@index([documentType, taxYear])
  @@index([filingStatus])
  @@index([pdfStorageKey])
  @@map("tax_documents")
}

model PaymentThreshold {
  id                   String    @id @default(cuid())
  creatorId            String    @map("creator_id")
  taxYear              Int       @map("tax_year")
  jurisdiction         String    @default("US") @db.VarChar(10)
  totalPaymentsCents   Int       @default(0) @map("total_payments_cents")
  thresholdAmountCents Int       @map("threshold_amount_cents")
  thresholdMet         Boolean   @default(false) @map("threshold_met")
  thresholdMetAt       DateTime? @map("threshold_met_at")
  lastUpdated          DateTime  @default(now()) @map("last_updated")
  metadata             Json      @default("{}")
  creator              Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, taxYear, jurisdiction])
  @@index([creatorId, taxYear])
  @@index([jurisdiction, taxYear])
  @@index([thresholdMet, lastUpdated])
  @@map("payment_thresholds")
}

model TaxWithholding {
  id                    String             @id @default(cuid())
  creatorId             String             @map("creator_id")
  withholdingType       TaxWithholdingType @map("withholding_type")
  percentageRate        Decimal            @db.Decimal(5, 4)
  effectiveStartDate    DateTime           @map("effective_start_date") @db.Date
  effectiveEndDate      DateTime?          @map("effective_end_date") @db.Date
  supportingDocumentKey String?            @map("supporting_document_key")
  status                String             @default("ACTIVE") @db.VarChar(20)
  createdBy             String             @map("created_by")
  metadata              Json               @default("{}")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @default(now()) @map("updated_at")
  createdByUser         User               @relation(fields: [createdBy], references: [id])
  creator               Creator            @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([status])
  @@index([effectiveStartDate, effectiveEndDate])
  @@map("tax_withholdings")
}

model TaxJurisdiction {
  id                    String    @id @default(cuid())
  creatorId             String    @map("creator_id")
  countryCode           String    @db.VarChar(2)
  stateProvince         String?   @map("state_province") @db.VarChar(10)
  taxTreatyStatus       String?   @map("tax_treaty_status") @db.VarChar(50)
  applicableRate        Decimal?  @map("applicable_rate") @db.Decimal(5, 4)
  reportingRequirements Json      @default("{}") @map("reporting_requirements")
  documentationType     String?   @map("documentation_type") @db.VarChar(50)
  documentationExpiry   DateTime? @map("documentation_expiry") @db.Date
  isPrimary             Boolean   @default(true) @map("is_primary")
  effectiveDate         DateTime  @default(now()) @map("effective_date") @db.Date
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @map("updated_at")
  creator               Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([countryCode])
  @@index([creatorId, isPrimary])
  @@index([documentationExpiry])
  @@map("tax_jurisdictions")
}

model AnnualTaxSummary {
  id                      String    @id @default(cuid())
  creatorId               String    @map("creator_id")
  taxYear                 Int       @map("tax_year")
  totalGrossPaymentsCents Int       @default(0) @map("total_gross_payments_cents")
  totalWithheldCents      Int       @default(0) @map("total_withheld_cents")
  paymentCount            Int       @default(0) @map("payment_count")
  formsRequired           Json      @default("[]") @map("forms_required")
  formsGenerated          Json      @default("[]") @map("forms_generated")
  summaryPdfKey           String?   @map("summary_pdf_key")
  generatedAt             DateTime? @map("generated_at")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @default(now()) @map("updated_at")
  creator                 Creator   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@unique([creatorId, taxYear])
  @@index([creatorId, taxYear])
  @@index([taxYear])
  @@index([generatedAt])
  @@map("annual_tax_summaries")
}

model TaxFormJob {
  id                String    @id @default(cuid())
  taxYear           Int       @map("tax_year")
  jobType           String    @db.VarChar(50)
  status            String    @default("PENDING") @db.VarChar(20)
  totalCreators     Int       @default(0) @map("total_creators")
  processedCreators Int       @default(0) @map("processed_creators")
  failedCreators    Int       @default(0) @map("failed_creators")
  errorDetails      Json      @default("[]") @map("error_details")
  startedAt         DateTime? @map("started_at")
  completedAt       DateTime? @map("completed_at")
  createdBy         String?   @map("created_by")
  metadata          Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @map("updated_at")
  createdByUser     User?     @relation(fields: [createdBy], references: [id])

  @@index([taxYear, jobType])
  @@index([status])
  @@index([createdAt])
  @@map("tax_form_jobs")
}

model FinancialReport {
  id                String              @id @default(cuid())
  reportType        FinancialReportType
  period            Json
  generatedAt       DateTime            @default(now()) @map("generated_at")
  generatedBy       String              @map("generated_by")
  status            ReportStatus        @default(GENERATING)
  storageKey        String?             @map("storage_key")
  metadata          Json                @default("{}")
  scheduledReportId String?             @map("scheduled_report_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  generatedByUser   User                @relation("FinancialReportsGenerated", fields: [generatedBy], references: [id])
  scheduledReport   ScheduledReport?    @relation(fields: [scheduledReportId], references: [id])
  downloads         ReportDownload[]

  @@index([reportType, generatedAt])
  @@index([generatedBy])
  @@index([status])
  @@map("financial_reports")
}

model ScheduledReport {
  id              String              @id @default(cuid())
  name            String              @db.VarChar(255)
  reportType      FinancialReportType
  frequency       ReportFrequency
  cronExpression  String              @map("cron_expression")
  recipients      Json
  isActive        Boolean             @default(true) @map("is_active")
  lastGeneratedAt DateTime?           @map("last_generated_at")
  nextScheduledAt DateTime?           @map("next_scheduled_at")
  parameters      Json                @default("{}")
  createdBy       String              @map("created_by")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @default(now()) @map("updated_at")
  reports         FinancialReport[]
  createdByUser   User                @relation("ScheduledReportsCreated", fields: [createdBy], references: [id])

  @@index([isActive, nextScheduledAt])
  @@index([reportType])
  @@map("scheduled_reports")
}

model ReportDownload {
  id           String          @id @default(cuid())
  reportId     String          @map("report_id")
  userId       String          @map("user_id")
  downloadUrl  String          @map("download_url")
  expiresAt    DateTime        @map("expires_at")
  downloadedAt DateTime?       @map("downloaded_at")
  ipAddress    String?         @map("ip_address")
  userAgent    String?         @map("user_agent")
  createdAt    DateTime        @default(now()) @map("created_at")
  report       FinancialReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user         User            @relation("ReportDownloads", fields: [userId], references: [id])

  @@index([reportId])
  @@index([userId])
  @@index([expiresAt])
  @@map("report_downloads")
}

model CashFlowProjection {
  id                    String   @id @default(cuid())
  projectionDate        DateTime @unique @map("projection_date") @db.Date
  projectedInflowCents  Int      @map("projected_inflow_cents")
  projectedOutflowCents Int      @map("projected_outflow_cents")
  netCashFlowCents      Int      @map("net_cash_flow_cents")
  confidenceLevel       Decimal  @map("confidence_level") @db.Decimal(3, 2)
  basedOnDays           Int      @map("based_on_days")
  methodology           String   @db.VarChar(50)
  createdAt             DateTime @default(now()) @map("created_at")

  @@index([projectionDate])
  @@map("cash_flow_projections")
}

model AccountsReceivableAging {
  id                     String      @id @default(cuid())
  snapshotDate           DateTime    @map("snapshot_date") @db.Date
  entityType             String      @map("entity_type") @db.VarChar(50)
  entityId               String      @map("entity_id")
  brandId                String?     @map("brand_id")
  originalAmountCents    Int         @map("original_amount_cents")
  outstandingAmountCents Int         @map("outstanding_amount_cents")
  daysOutstanding        Int         @map("days_outstanding")
  agingBucket            AgingBucket @map("aging_bucket")
  riskLevel              RiskLevel
  invoiceDate            DateTime    @map("invoice_date") @db.Date
  dueDate                DateTime    @map("due_date") @db.Date
  metadata               Json        @default("{}")
  createdAt              DateTime    @default(now()) @map("created_at")
  brand                  Brand?      @relation("BrandReceivables", fields: [brandId], references: [id])

  @@index([snapshotDate, agingBucket])
  @@index([brandId])
  @@index([daysOutstanding])
  @@map("accounts_receivable_aging")
}

model AccountsPayableEntry {
  id                 String            @id @default(cuid())
  creatorId          String            @map("creator_id")
  royaltyStatementId String?           @map("royalty_statement_id")
  payoutId           String?           @map("payout_id")
  amountOwedCents    Int               @map("amount_owed_cents")
  dueDate            DateTime          @map("due_date") @db.Date
  status             PayableStatus     @default(PENDING)
  paymentTerms       String?           @map("payment_terms")
  priority           PayablePriority   @default(NORMAL)
  createdAt          DateTime          @default(now()) @map("created_at")
  paidAt             DateTime?         @map("paid_at")
  creator            Creator           @relation("CreatorPayables", fields: [creatorId], references: [id])
  payout             Payout?           @relation("PayoutPayables", fields: [payoutId], references: [id])
  royaltyStatement   RoyaltyStatement? @relation("StatementPayables", fields: [royaltyStatementId], references: [id])

  @@index([creatorId, status])
  @@index([dueDate, status])
  @@index([priority])
  @@map("accounts_payable_entries")
}

model CommissionTracking {
  id                    String                    @id @default(cuid())
  transactionId         String                    @map("transaction_id")
  transactionType       CommissionTransactionType @map("transaction_type")
  licenseId             String?                   @map("license_id")
  paymentId             String?                   @map("payment_id")
  grossAmountCents      Int                       @map("gross_amount_cents")
  commissionRateBps     Int                       @map("commission_rate_bps")
  commissionAmountCents Int                       @map("commission_amount_cents")
  netAmountCents        Int                       @map("net_amount_cents")
  commissionCategory    CommissionCategory
  createdAt             DateTime                  @default(now()) @map("created_at")
  recognizedAt          DateTime?                 @map("recognized_at")
  license               License?                  @relation("LicenseCommissions", fields: [licenseId], references: [id])
  payment               Payment?                  @relation("PaymentCommissions", fields: [paymentId], references: [id])

  @@index([transactionType, createdAt])
  @@index([commissionCategory])
  @@index([licenseId])
  @@map("commission_tracking")
}

model Category {
  id               String     @id @default(cuid())
  name             String     @db.VarChar(100)
  slug             String     @unique @db.VarChar(150)
  description      String?
  parentCategoryId String?    @map("parent_category_id")
  displayOrder     Int        @default(0) @map("display_order")
  isActive         Boolean    @default(true) @map("is_active")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  Category[] @relation("CategoryHierarchy")
  posts            Post[]

  @@index([slug])
  @@index([parentCategoryId])
  @@index([isActive])
  @@index([displayOrder])
  @@map("categories")
}

model Post {
  id                 String                 @id @default(cuid())
  title              String                 @db.VarChar(500)
  slug               String                 @unique @db.VarChar(600)
  content            String
  excerpt            String?                @db.VarChar(1000)
  authorId           String                 @map("author_id")
  categoryId         String?                @map("category_id")
  featuredImageUrl   String?                @map("featured_image_url")
  status             PostStatus             @default(DRAFT)
  publishedAt        DateTime?              @map("published_at")
  scheduledFor       DateTime?              @map("scheduled_for")
  readTimeMinutes    Int                    @default(0) @map("read_time_minutes")
  viewCount          Int                    @default(0) @map("view_count")
  isFeatured         Boolean                @default(false) @map("is_featured")
  tags               Json                   @default("[]")
  seoTitle           String?                @map("seo_title") @db.VarChar(70)
  seoDescription     String?                @map("seo_description") @db.VarChar(160)
  seoKeywords        String?                @map("seo_keywords")
  avgReadTimeSeconds Float                  @default(0) @map("avg_read_time_seconds")
  bounceRate         Float                  @default(0) @map("bounce_rate")
  socialSharesCount  Int                    @default(0) @map("social_shares_count")
  emailCaptureCount  Int                    @default(0) @map("email_capture_count")
  emailCaptureRate   Float                  @default(0) @map("email_capture_rate")
  uniqueVisitors     Int                    @default(0) @map("unique_visitors")
  createdAt          DateTime               @default(now()) @map("created_at")
  updatedAt          DateTime               @updatedAt @map("updated_at")
  deletedAt          DateTime?              @map("deleted_at")
  assignedToId       String?                @map("assigned_to_id")
  events             Event[]
  dailyMetrics       PostDailyMetrics[]
  experimentTargets  PostExperimentTarget[]
  revisions          PostRevision[]
  socialShares       PostSocialShare[]
  workflowHistory    PostWorkflowHistory[]
  assignedTo         User?                  @relation("PostsAssignedTo", fields: [assignedToId], references: [id])
  author             User                   @relation("PostsAuthor", fields: [authorId], references: [id])
  category           Category?              @relation(fields: [categoryId], references: [id])

  @@index([slug])
  @@index([status])
  @@index([publishedAt(sort: Desc)])
  @@index([authorId])
  @@index([assignedToId])
  @@index([categoryId])
  @@index([scheduledFor])
  @@index([deletedAt])
  @@index([status, publishedAt(sort: Desc)])
  @@index([authorId, status])
  @@index([assignedToId, status])
  @@index([categoryId, status])
  @@index([isFeatured, status, publishedAt(sort: Desc)])
  @@index([bounceRate])
  @@index([socialSharesCount(sort: Desc)])
  @@index([emailCaptureRate(sort: Desc)])
  @@index([avgReadTimeSeconds(sort: Desc)])
  @@map("posts")
}

model PostRevision {
  id           String   @id @default(cuid())
  postId       String   @map("post_id")
  content      String
  authorId     String   @map("author_id")
  revisionNote String?  @map("revision_note")
  createdAt    DateTime @default(now()) @map("created_at")
  author       User     @relation("PostRevisionsAuthor", fields: [authorId], references: [id])
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt(sort: Desc)])
  @@index([authorId])
  @@map("post_revisions")
}

model PostWorkflowHistory {
  id         String     @id @default(cuid())
  postId     String     @map("post_id")
  fromStatus PostStatus @map("from_status")
  toStatus   PostStatus @map("to_status")
  userId     String     @map("user_id")
  comments   String?
  reason     String?
  metadata   Json?      @default("{}")
  createdAt  DateTime   @default(now()) @map("created_at")
  post       Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User       @relation("WorkflowHistoryCreatedBy", fields: [userId], references: [id])

  @@index([postId])
  @@index([createdAt(sort: Desc)])
  @@index([userId])
  @@index([fromStatus, toStatus])
  @@map("post_workflow_history")
}

model BlogRedirect {
  id              String    @id @default(cuid())
  sourcePath      String    @unique @map("source_path") @db.VarChar(600)
  destinationPath String    @map("destination_path") @db.VarChar(600)
  redirectType    Int       @default(301) @map("redirect_type") @db.SmallInt
  createdBy       String    @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  expiresAt       DateTime? @map("expires_at")
  isActive        Boolean   @default(true) @map("is_active")
  hitCount        Int       @default(0) @map("hit_count")
  lastAccessedAt  DateTime? @map("last_accessed_at")
  creator         User      @relation("BlogRedirectsCreatedBy", fields: [createdBy], references: [id])

  @@index([sourcePath])
  @@index([isActive])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("blog_redirects")
}

model RobotsConfig {
  id            String   @id @default(cuid())
  userAgent     String   @default("*") @map("user_agent") @db.VarChar(100)
  directiveType String   @map("directive_type") @db.VarChar(20)
  path          String?  @db.VarChar(500)
  value         String?  @db.VarChar(500)
  priority      Int      @default(0)
  isActive      Boolean  @default(true) @map("is_active")
  createdBy     String   @map("created_by")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  creator       User     @relation("RobotsConfigCreatedBy", fields: [createdBy], references: [id])

  @@index([isActive])
  @@index([priority, userAgent])
  @@index([userAgent])
  @@map("robots_config")
}

model PostExperiment {
  id                      String                     @id @default(cuid())
  name                    String                     @db.VarChar(255)
  description             String?                    @db.VarChar(1000)
  status                  PostExperimentStatus       @default(DRAFT)
  startDate               DateTime                   @map("start_date")
  endDate                 DateTime                   @map("end_date")
  trafficAllocation       Int                        @default(50) @map("traffic_allocation")
  successMetrics          Json                       @map("success_metrics")
  winningVariantId        String?                    @map("winning_variant_id")
  statisticalSignificance Boolean                    @default(false) @map("statistical_significance")
  confidenceLevel         Float                      @default(0.95) @map("confidence_level")
  createdBy               String                     @map("created_by")
  createdAt               DateTime                   @default(now()) @map("created_at")
  updatedAt               DateTime                   @updatedAt @map("updated_at")
  assignments             PostExperimentAssignment[]
  postTargets             PostExperimentTarget[]
  variants                PostExperimentVariant[]
  creator                 User                       @relation("PostExperimentsCreatedBy", fields: [createdBy], references: [id])

  @@index([status])
  @@index([startDate, endDate])
  @@index([createdBy])
  @@index([winningVariantId])
  @@map("post_experiments")
}

model PostExperimentVariant {
  id                String                     @id @default(cuid())
  experimentId      String                     @map("experiment_id")
  name              String                     @db.VarChar(100)
  description       String?                    @db.VarChar(500)
  trafficAllocation Int                        @map("traffic_allocation")
  content           Json
  isControl         Boolean                    @default(false) @map("is_control")
  createdAt         DateTime                   @default(now()) @map("created_at")
  assignments       PostExperimentAssignment[]
  experiment        PostExperiment             @relation(fields: [experimentId], references: [id], onDelete: Cascade)

  @@index([experimentId])
  @@index([isControl])
  @@map("post_experiment_variants")
}

model PostExperimentTarget {
  id           String         @id @default(cuid())
  experimentId String         @map("experiment_id")
  postId       String         @map("post_id")
  experiment   PostExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([experimentId, postId])
  @@index([experimentId])
  @@index([postId])
  @@map("post_experiment_targets")
}

model PostExperimentAssignment {
  id           String                @id @default(cuid())
  experimentId String                @map("experiment_id")
  variantId    String                @map("variant_id")
  sessionId    String                @map("session_id")
  userId       String?               @map("user_id")
  assignedAt   DateTime              @default(now()) @map("assigned_at")
  experiment   PostExperiment        @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  user         User?                 @relation("PostExperimentAssignments", fields: [userId], references: [id])
  variant      PostExperimentVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([experimentId, sessionId])
  @@index([experimentId])
  @@index([variantId])
  @@index([sessionId])
  @@index([userId])
  @@map("post_experiment_assignments")
}

model PostDailyMetrics {
  id                         String   @id @default(cuid())
  date                       DateTime @db.Date
  postId                     String   @map("post_id")
  views                      Int      @default(0)
  uniqueVisitors             Int      @default(0) @map("unique_visitors")
  totalEngagementTimeSeconds Int      @default(0) @map("total_engagement_time_seconds")
  avgEngagementTimeSeconds   Float    @default(0) @map("avg_engagement_time_seconds")
  avgScrollDepthPercentage   Float    @default(0) @map("avg_scroll_depth_percentage")
  ctaClicks                  Int      @default(0) @map("cta_clicks")
  shares                     Int      @default(0)
  bounceRate                 Float    @default(0) @map("bounce_rate")
  conversionRate             Float    @default(0) @map("conversion_rate")
  emailCaptures              Int      @default(0) @map("email_captures")
  emailCaptureRate           Float    @default(0) @map("email_capture_rate")
  topReferrers               Json     @default("[]") @map("top_referrers")
  topCtaTypes                Json     @default("[]") @map("top_cta_types")
  deviceBreakdown            Json     @default("{}") @map("device_breakdown")
  sourceBreakdown            Json     @default("{}") @map("source_breakdown")
  socialShareBreakdown       Json     @default("{}") @map("social_share_breakdown")
  experimentData             Json?    @map("experiment_data")
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  post                       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([date, postId])
  @@index([date])
  @@index([postId, date])
  @@index([views])
  @@index([uniqueVisitors])
  @@index([emailCaptures])
  @@index([emailCaptureRate])
  @@map("post_daily_metrics")
}

model PostSocialShare {
  id           String    @id @default(cuid())
  postId       String    @map("post_id")
  platform     String    @db.VarChar(50)
  shareCount   Int       @default(0) @map("share_count")
  lastSharedAt DateTime? @map("last_shared_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, platform])
  @@index([postId])
  @@index([platform])
  @@index([shareCount(sort: Desc)])
  @@map("post_social_shares")
}

model MediaItem {
  id             String           @id @default(cuid())
  filename       String           @db.VarChar(255)
  originalName   String           @map("original_name") @db.VarChar(255)
  storageKey     String           @unique @map("storage_key")
  mimeType       String           @map("mime_type") @db.VarChar(100)
  fileSize       BigInt           @map("file_size")
  width          Int?
  height         Int?
  type           MediaType
  status         MediaStatus      @default(PROCESSING)
  uploadedBy     String           @map("uploaded_by")
  title          String?          @db.VarChar(500)
  altText        String?          @map("alt_text") @db.VarChar(500)
  description    String?
  tags           Json             @default("[]")
  metadata       Json             @default("{}")
  cdnUrl         String?          @map("cdn_url")
  thumbnailUrl   String?          @map("thumbnail_url")
  previewUrl     String?          @map("preview_url")
  exifData       Json?            @map("exif_data")
  colorPalette   Json?            @map("color_palette")
  averageColor   String?          @map("average_color") @db.VarChar(7)
  dominantColor  String?          @map("dominant_color") @db.VarChar(7)
  isPublic       Boolean          @default(false) @map("is_public")
  accessLevel    MediaAccessLevel @default(ADMIN_ONLY) @map("access_level")
  usageRights    String?          @map("usage_rights")
  licenseInfo    String?          @map("license_info")
  copyrightInfo  String?          @map("copyright_info")
  lastAccessedAt DateTime?        @map("last_accessed_at")
  accessCount    Int              @default(0) @map("access_count")
  downloadCount  Int              @default(0) @map("download_count")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")

  @@index([uploadedBy])
  @@index([type])
  @@index([status])
  @@index([accessLevel])
  @@index([isPublic])
  @@index([createdAt(sort: Desc)])
  @@index([lastAccessedAt(sort: Desc)])
  @@index([downloadCount(sort: Desc)])
  @@index([accessCount(sort: Desc)])
  @@index([deletedAt])
  @@index([storageKey])
  @@index([filename])
  @@index([mimeType])
  @@index([fileSize])
  @@map("media_items")
}

model MediaCollection {
  id           String              @id @default(cuid())
  name         String              @db.VarChar(255)
  slug         String              @unique @db.VarChar(300)
  description  String?
  type         MediaCollectionType @default(MANUAL)
  visibility   MediaVisibility     @default(PRIVATE)
  rules        Json?
  coverImageId String?             @map("cover_image_id")
  isSystem     Boolean             @default(false) @map("is_system")
  sortOrder    Int                 @default(0) @map("sort_order")
  itemCount    Int                 @default(0) @map("item_count")
  totalSize    BigInt              @default(0) @map("total_size")
  createdBy    String              @map("created_by")
  updatedBy    String?             @map("updated_by")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @map("updated_at")
  deletedAt    DateTime?           @map("deleted_at")

  @@index([createdBy])
  @@index([type])
  @@index([visibility])
  @@index([isSystem])
  @@index([sortOrder])
  @@index([createdAt(sort: Desc)])
  @@index([slug])
  @@index([deletedAt])
  @@map("media_collections")
}

model MediaCollectionItem {
  id           String   @id @default(cuid())
  collectionId String   @map("collection_id")
  mediaItemId  String   @map("media_item_id")
  sortOrder    Int      @default(0) @map("sort_order")
  addedBy      String   @map("added_by")
  addedAt      DateTime @default(now()) @map("added_at")

  @@unique([collectionId, mediaItemId])
  @@index([collectionId, sortOrder])
  @@index([mediaItemId])
  @@index([addedBy])
  @@index([addedAt])
  @@map("media_collection_items")
}

model MediaVariant {
  id              String           @id @default(cuid())
  originalMediaId String           @map("original_media_id")
  variantType     MediaVariantType
  filename        String           @db.VarChar(255)
  storageKey      String           @unique @map("storage_key")
  mimeType        String           @map("mime_type") @db.VarChar(100)
  fileSize        BigInt           @map("file_size")
  width           Int?
  height          Int?
  quality         Int?
  format          String?          @db.VarChar(20)
  optimizations   Json             @default("[]")
  cdnUrl          String?          @map("cdn_url")
  createdAt       DateTime         @default(now()) @map("created_at")

  @@index([originalMediaId])
  @@index([variantType])
  @@index([storageKey])
  @@index([createdAt])
  @@map("media_variants")
}

model MediaUsageTracking {
  id          String         @id @default(cuid())
  mediaItemId String         @map("media_item_id")
  usageType   MediaUsageType
  contextType String         @map("context_type") @db.VarChar(50)
  contextId   String?        @map("context_id")
  usedBy      String         @map("used_by")
  usedAt      DateTime       @default(now()) @map("used_at")
  sessionId   String?        @map("session_id")
  ipAddress   String?        @map("ip_address")
  userAgent   String?        @map("user_agent")
  referrer    String?
  metadata    Json           @default("{}")

  @@index([mediaItemId, usedAt(sort: Desc)])
  @@index([usageType])
  @@index([contextType, contextId])
  @@index([usedBy])
  @@index([usedAt(sort: Desc)])
  @@map("media_usage_tracking")
}

model MediaBulkOperation {
  id                String                   @id @default(cuid())
  name              String                   @db.VarChar(255)
  operationType     MediaBulkOperationType
  status            MediaBulkOperationStatus @default(PENDING)
  parameters        Json                     @default("{}")
  totalItems        Int                      @default(0) @map("total_items")
  processedItems    Int                      @default(0) @map("processed_items")
  successfulItems   Int                      @default(0) @map("successful_items")
  failedItems       Int                      @default(0) @map("failed_items")
  errorLog          Json                     @default("[]") @map("error_log")
  startedAt         DateTime?                @map("started_at")
  completedAt       DateTime?                @map("completed_at")
  estimatedFinishAt DateTime?                @map("estimated_finish_at")
  createdBy         String                   @map("created_by")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")

  @@index([createdBy])
  @@index([status])
  @@index([operationType])
  @@index([createdAt(sort: Desc)])
  @@index([startedAt])
  @@index([completedAt])
  @@map("media_bulk_operations")
}

model MediaBulkOperationTarget {
  id           String               @id @default(cuid())
  operationId  String               @map("operation_id")
  mediaItemId  String               @map("media_item_id")
  status       MediaOperationStatus @default(PENDING)
  errorMessage String?              @map("error_message")
  processedAt  DateTime?            @map("processed_at")

  @@index([operationId])
  @@index([mediaItemId])
  @@map("media_bulk_operation_targets")
}

model SearchAnalyticsEvent {
  id                      String   @id @default(cuid())
  query                   String
  entities                Json     @default("[]")
  filters                 Json?
  resultsCount            Int      @default(0) @map("results_count")
  executionTimeMs         Int      @map("execution_time_ms")
  userId                  String?  @map("user_id")
  sessionId               String?  @map("session_id")
  clickedResultId         String?  @map("clicked_result_id")
  clickedResultPosition   Int?     @map("clicked_result_position")
  clickedResultEntityType String?  @map("clicked_result_entity_type")
  createdAt               DateTime @default(now()) @map("created_at")
  user                    User?    @relation("SearchAnalyticsEvents", fields: [userId], references: [id])

  @@index([query])
  @@index([userId])
  @@index([createdAt])
  @@index([resultsCount])
  @@index([clickedResultId])
  @@map("search_analytics_events")
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String   @db.VarChar(100)
  searchQuery String   @map("search_query") @db.VarChar(200)
  entities    Json     @default("[]")
  filters     Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation("SavedSearches", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("saved_searches")
}

model WeeklyMetric {
  id                       String   @id @default(cuid())
  weekStartDate            DateTime @map("week_start_date") @db.Date
  weekEndDate              DateTime @map("week_end_date") @db.Date
  projectId                String?  @map("project_id")
  ipAssetId                String?  @map("ip_asset_id")
  licenseId                String?  @map("license_id")
  totalViews               Int      @default(0) @map("total_views")
  totalClicks              Int      @default(0) @map("total_clicks")
  totalConversions         Int      @default(0) @map("total_conversions")
  totalRevenueCents        Int      @default(0) @map("total_revenue_cents")
  uniqueVisitors           Int      @default(0) @map("unique_visitors")
  totalEngagementTime      Int      @default(0) @map("total_engagement_time")
  viewsGrowthPercent       Decimal? @map("views_growth_percent") @db.Decimal(10, 2)
  clicksGrowthPercent      Decimal? @map("clicks_growth_percent") @db.Decimal(10, 2)
  conversionsGrowthPercent Decimal? @map("conversions_growth_percent") @db.Decimal(10, 2)
  revenueGrowthPercent     Decimal? @map("revenue_growth_percent") @db.Decimal(10, 2)
  avgDailyViews            Decimal? @map("avg_daily_views") @db.Decimal(10, 2)
  avgDailyClicks           Decimal? @map("avg_daily_clicks") @db.Decimal(10, 2)
  avgDailyConversions      Decimal? @map("avg_daily_conversions") @db.Decimal(10, 2)
  avgDailyRevenueCents     Decimal? @map("avg_daily_revenue_cents") @db.Decimal(10, 2)
  daysInPeriod             Int      @default(7) @map("days_in_period")
  aggregationVersion       String   @default("1.0") @map("aggregation_version") @db.VarChar(20)
  metadata                 Json     @default("{}")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  ipAsset                  IpAsset? @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  license                  License? @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  project                  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([weekStartDate, projectId, ipAssetId, licenseId], name: "unique_weekly_metric")
  @@index([weekStartDate(sort: Desc)])
  @@index([projectId, weekStartDate(sort: Desc)])
  @@index([ipAssetId, weekStartDate(sort: Desc)])
  @@index([licenseId, weekStartDate(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("weekly_metrics")
}

model MonthlyMetric {
  id                       String   @id @default(cuid())
  monthStartDate           DateTime @map("month_start_date") @db.Date
  monthEndDate             DateTime @map("month_end_date") @db.Date
  year                     Int
  month                    Int
  projectId                String?  @map("project_id")
  ipAssetId                String?  @map("ip_asset_id")
  licenseId                String?  @map("license_id")
  totalViews               Int      @default(0) @map("total_views")
  totalClicks              Int      @default(0) @map("total_clicks")
  totalConversions         Int      @default(0) @map("total_conversions")
  totalRevenueCents        Int      @default(0) @map("total_revenue_cents")
  uniqueVisitors           Int      @default(0) @map("unique_visitors")
  totalEngagementTime      Int      @default(0) @map("total_engagement_time")
  viewsGrowthPercent       Decimal? @map("views_growth_percent") @db.Decimal(10, 2)
  clicksGrowthPercent      Decimal? @map("clicks_growth_percent") @db.Decimal(10, 2)
  conversionsGrowthPercent Decimal? @map("conversions_growth_percent") @db.Decimal(10, 2)
  revenueGrowthPercent     Decimal? @map("revenue_growth_percent") @db.Decimal(10, 2)
  avgDailyViews            Decimal? @map("avg_daily_views") @db.Decimal(10, 2)
  avgDailyClicks           Decimal? @map("avg_daily_clicks") @db.Decimal(10, 2)
  avgDailyConversions      Decimal? @map("avg_daily_conversions") @db.Decimal(10, 2)
  avgDailyRevenueCents     Decimal? @map("avg_daily_revenue_cents") @db.Decimal(10, 2)
  weeksInMonth             Int?     @map("weeks_in_month")
  weeklyBreakdown          Json     @default("[]") @map("weekly_breakdown")
  daysInPeriod             Int      @map("days_in_period")
  aggregationVersion       String   @default("1.0") @map("aggregation_version") @db.VarChar(20)
  metadata                 Json     @default("{}")
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  ipAsset                  IpAsset? @relation(fields: [ipAssetId], references: [id], onDelete: Cascade)
  license                  License? @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  project                  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([year, month, projectId, ipAssetId, licenseId], name: "unique_monthly_metric")
  @@index([year(sort: Desc), month(sort: Desc)])
  @@index([monthStartDate(sort: Desc)])
  @@index([projectId, year(sort: Desc), month(sort: Desc)])
  @@index([ipAssetId, year(sort: Desc), month(sort: Desc)])
  @@index([licenseId, year(sort: Desc), month(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("monthly_metrics")
}

model CustomMetricDefinition {
  id                  String                   @id @default(cuid())
  name                String                   @db.VarChar(255)
  description         String?
  metricType          MetricType               @map("metric_type")
  dataSource          String                   @map("data_source") @db.VarChar(100)
  calculationFormula  String                   @map("calculation_formula")
  dimensions          Json                     @default("[]")
  filters             Json                     @default("{}")
  aggregationMethod   String                   @map("aggregation_method") @db.VarChar(50)
  createdBy           String                   @map("created_by")
  visibility          MetricVisibility         @default(PRIVATE)
  allowedRoles        Json                     @default("[\"ADMIN\"]") @map("allowed_roles")
  isValidated         Boolean                  @default(false) @map("is_validated")
  validationErrors    Json?                    @map("validation_errors")
  estimatedCost       String?                  @map("estimated_cost")
  queryTimeoutSeconds Int                      @default(30) @map("query_timeout_seconds")
  version             Int                      @default(1)
  isActive            Boolean                  @default(true) @map("is_active")
  parentMetricId      String?                  @map("parent_metric_id")
  usageCount          Int                      @default(0) @map("usage_count")
  lastCalculatedAt    DateTime?                @map("last_calculated_at")
  createdAt           DateTime                 @default(now()) @map("created_at")
  updatedAt           DateTime                 @updatedAt @map("updated_at")
  deletedAt           DateTime?                @map("deleted_at")
  creator             User                     @relation("CustomMetricCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  parentMetric        CustomMetricDefinition?  @relation("MetricVersions", fields: [parentMetricId], references: [id])
  childMetrics        CustomMetricDefinition[] @relation("MetricVersions")
  values              CustomMetricValue[]

  @@unique([name, deletedAt], name: "unique_active_metric_name")
  @@index([name])
  @@index([createdBy])
  @@index([isActive])
  @@index([metricType])
  @@index([lastCalculatedAt(sort: Desc)])
  @@index([usageCount(sort: Desc)])
  @@map("custom_metric_definitions")
}

model CustomMetricValue {
  id                    String                 @id @default(cuid())
  metricDefinitionId    String                 @map("metric_definition_id")
  periodType            MetricPeriodType       @map("period_type")
  periodStartDate       DateTime               @map("period_start_date") @db.Date
  periodEndDate         DateTime               @map("period_end_date") @db.Date
  dimensionValues       Json                   @default("{}") @map("dimension_values")
  metricValue           Decimal                @map("metric_value") @db.Decimal(20, 4)
  metricValueString     String?                @map("metric_value_string")
  calculationTimestamp  DateTime               @default(now()) @map("calculation_timestamp")
  calculationDurationMs Int?                   @map("calculation_duration_ms")
  recordCount           Int?                   @map("record_count")
  createdAt             DateTime               @default(now()) @map("created_at")
  metricDefinition      CustomMetricDefinition @relation(fields: [metricDefinitionId], references: [id], onDelete: Cascade)

  @@unique([metricDefinitionId, periodStartDate, periodEndDate, dimensionValues], name: "unique_custom_metric_value")
  @@index([metricDefinitionId, periodStartDate(sort: Desc)])
  @@index([periodStartDate(sort: Desc), periodEndDate(sort: Desc)])
  @@index([calculationTimestamp(sort: Desc)])
  @@map("custom_metric_values")
}

model RealtimeMetricsCache {
  id                     String             @id @default(cuid())
  metricKey              String             @unique @map("metric_key") @db.VarChar(255)
  metricType             RealtimeMetricType @map("metric_type")
  currentValue           Decimal            @map("current_value") @db.Decimal(20, 4)
  previousValue          Decimal?           @map("previous_value") @db.Decimal(20, 4)
  dimensions             Json               @default("{}")
  unit                   String?            @db.VarChar(50)
  windowSizeSeconds      Int?               @map("window_size_seconds")
  windowData             Json               @default("[]") @map("window_data")
  lastUpdatedAt          DateTime           @default(now()) @map("last_updated_at")
  updateCount            Int                @default(1) @map("update_count")
  expiresAt              DateTime?          @map("expires_at")
  refreshIntervalSeconds Int                @default(60) @map("refresh_interval_seconds")
  createdAt              DateTime           @default(now()) @map("created_at")

  @@index([metricKey])
  @@index([metricType])
  @@index([lastUpdatedAt(sort: Desc)])
  @@index([expiresAt])
  @@map("realtime_metrics_cache")
}

model MetricsAggregationJobsLog {
  id               String               @id @default(cuid())
  jobType          String               @map("job_type") @db.VarChar(50)
  periodStartDate  DateTime             @map("period_start_date") @db.Date
  periodEndDate    DateTime             @map("period_end_date") @db.Date
  startedAt        DateTime             @map("started_at")
  completedAt      DateTime?            @map("completed_at")
  status           AggregationJobStatus
  recordsProcessed Int                  @default(0) @map("records_processed")
  recordsCreated   Int                  @default(0) @map("records_created")
  recordsUpdated   Int                  @default(0) @map("records_updated")
  errorsCount      Int                  @default(0) @map("errors_count")
  durationSeconds  Decimal?             @map("duration_seconds") @db.Decimal(10, 2)
  memoryUsedMb     Int?                 @map("memory_used_mb")
  errorMessage     String?              @map("error_message")
  errorStack       String?              @map("error_stack")
  metadata         Json                 @default("{}")
  createdAt        DateTime             @default(now()) @map("created_at")

  @@index([jobType, periodStartDate(sort: Desc)])
  @@index([status, startedAt(sort: Desc)])
  @@index([startedAt(sort: Desc)])
  @@map("metrics_aggregation_jobs_log")
}

model TwoFactorComplianceMetrics {
  id                      String   @id @default(cuid())
  periodStart             DateTime @map("period_start")
  periodEnd               DateTime @map("period_end")
  periodType              String   @map("period_type")
  totalUsers              Int      @map("total_users")
  usersWithTwoFactor      Int      @map("users_with_two_factor")
  adoptionRate            Decimal  @map("adoption_rate") @db.Decimal(5, 2)
  adminTotal              Int      @map("admin_total")
  adminEnabled            Int      @map("admin_enabled")
  creatorTotal            Int      @map("creator_total")
  creatorEnabled          Int      @map("creator_enabled")
  brandTotal              Int      @map("brand_total")
  brandEnabled            Int      @map("brand_enabled")
  talentTotal             Int      @map("talent_total")
  talentEnabled           Int      @map("talent_enabled")
  viewerTotal             Int      @map("viewer_total")
  viewerEnabled           Int      @map("viewer_enabled")
  totalAuthAttempts       Int      @map("total_auth_attempts")
  successfulAuths         Int      @map("successful_auths")
  failedAuths             Int      @map("failed_auths")
  failureRate             Decimal  @map("failure_rate") @db.Decimal(5, 2)
  totpAttempts            Int      @map("totp_attempts")
  smsAttempts             Int      @map("sms_attempts")
  backupCodeAttempts      Int      @map("backup_code_attempts")
  accountLockouts         Int      @map("account_lockouts")
  suspiciousActivities    Int      @map("suspicious_activities")
  emergencyCodesGenerated Int      @map("emergency_codes_generated")
  adminResets             Int      @map("admin_resets")
  backupCodesRegenerated  Int      @map("backup_codes_regenerated")
  usersWithLowBackupCodes Int      @map("users_with_low_backup_codes")
  backupCodesUsed         Int      @map("backup_codes_used")
  adoptionRateChange      Decimal? @map("adoption_rate_change") @db.Decimal(5, 2)
  failureRateChange       Decimal? @map("failure_rate_change") @db.Decimal(5, 2)
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@unique([periodStart, periodEnd, periodType])
  @@index([periodStart(sort: Desc)])
  @@index([periodType, periodStart(sort: Desc)])
  @@map("two_factor_compliance_metrics")
}

model TwoFactorSecurityEvent {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  eventType         String   @map("event_type")
  eventCategory     String   @map("event_category")
  success           Boolean  @default(true)
  failureReason     String?  @map("failure_reason")
  method            String?
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  deviceFingerprint String?  @map("device_fingerprint")
  locationCountry   String?  @map("location_country")
  locationRegion    String?  @map("location_region")
  locationCity      String?  @map("location_city")
  isAnomalous       Boolean  @default(false) @map("is_anomalous")
  anomalyScore      Decimal? @map("anomaly_score") @db.Decimal(5, 2)
  anomalyReasons    String[] @map("anomaly_reasons")
  adminId           String?  @map("admin_id")
  adminAction       String?  @map("admin_action")
  adminReason       String?  @map("admin_reason")
  metadata          Json?
  timestamp         DateTime @default(now())

  @@index([userId, timestamp(sort: Desc)])
  @@index([eventType, timestamp(sort: Desc)])
  @@index([eventCategory, timestamp(sort: Desc)])
  @@index([isAnomalous, timestamp(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@index([ipAddress, timestamp(sort: Desc)])
  @@index([adminId, timestamp(sort: Desc)])
  @@map("two_factor_security_events")
}

model TwoFactorSecurityAlert {
  id                  String    @id @default(cuid())
  alertType           String    @map("alert_type")
  severity            String    @map("severity")
  title               String
  description         String
  recommendation      String?
  metric              String
  currentValue        Decimal   @map("current_value") @db.Decimal(10, 2)
  threshold           Decimal   @map("threshold") @db.Decimal(10, 2)
  baselineValue       Decimal?  @map("baseline_value") @db.Decimal(10, 2)
  periodStart         DateTime  @map("period_start")
  periodEnd           DateTime  @map("period_end")
  affectedUserCount   Int?      @map("affected_user_count")
  affectedUsers       String[]  @map("affected_users")
  affectedIpAddresses String[]  @map("affected_ip_addresses")
  status              String    @default("active")
  acknowledgedAt      DateTime? @map("acknowledged_at")
  acknowledgedBy      String?   @map("acknowledged_by")
  resolvedAt          DateTime? @map("resolved_at")
  resolvedBy          String?   @map("resolved_by")
  resolution          String?
  notificationSent    Boolean   @default(false) @map("notification_sent")
  notificationSentAt  DateTime? @map("notification_sent_at")
  notifiedAdmins      String[]  @map("notified_admins")
  metadata            Json?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@index([alertType, createdAt(sort: Desc)])
  @@index([severity, status])
  @@index([status, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("two_factor_security_alerts")
}

model TwoFactorComplianceReport {
  id                 String    @id @default(cuid())
  reportType         String    @map("report_type")
  format             String
  periodStart        DateTime  @map("period_start")
  periodEnd          DateTime  @map("period_end")
  generatedBy        String?   @map("generated_by")
  generatedAt        DateTime  @default(now()) @map("generated_at")
  generationStatus   String    @default("pending") @map("generation_status")
  reportData         Json?     @map("report_data")
  summary            String?
  storageUrl         String?   @map("storage_url")
  storageKey         String?   @map("storage_key")
  fileSize           Int?      @map("file_size")
  emailedTo          String[]  @map("emailed_to")
  emailedAt          DateTime? @map("emailed_at")
  downloadCount      Int       @default(0) @map("download_count")
  lastDownloadedAt   DateTime? @map("last_downloaded_at")
  isScheduled        Boolean   @default(false) @map("is_scheduled")
  scheduleFrequency  String?   @map("schedule_frequency")
  nextGenerationDate DateTime? @map("next_generation_date")
  errorMessage       String?   @map("error_message")
  errorStack         String?   @map("error_stack")
  metadata           Json?
  expiresAt          DateTime? @map("expires_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([reportType, generatedAt(sort: Desc)])
  @@index([generatedBy, generatedAt(sort: Desc)])
  @@index([generationStatus])
  @@index([isScheduled, nextGenerationDate])
  @@index([generatedAt(sort: Desc)])
  @@map("two_factor_compliance_reports")
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum ProjectType {
  CAMPAIGN
  CONTENT
  LICENSING
}

enum UserRole {
  ADMIN
  CREATOR
  BRAND
  VIEWER
}

enum ResourceType {
  USER
  ACCOUNT
  ADMIN_ROLE
  APPROVAL_REQUEST
  ASSET
  ATTRIBUTION
  BRAND
  CAMPAIGN
  CREATOR
  EMAIL_CAMPAIGN
  EMAIL_PREFERENCES
  FILE
  FINANCIAL_REPORT
  IP_ASSET
  IP_OWNERSHIP
  LICENSE
  LICENSE_AMENDMENT
  LICENSE_EXTENSION
  LICENSE_REQUEST
  LOGIN_ATTEMPT
  MEDIA_ITEM
  MESSAGE
  NOTIFICATION
  PASSWORD
  PAYMENT
  PAYOUT
  POST
  PROJECT
  REPORT
  ROYALTY
  ROYALTY_RUN
  ROYALTY_STATEMENT
  SCHEDULED_REPORT
  SESSION
  TAX_DOCUMENT
  TAX_WITHHOLDING
  TWO_FACTOR_BACKUP_CODE
  TWO_FACTOR_POLICY
  VERIFICATION_TOKEN
  SYSTEM
  OTHER
}

enum Department {
  SUPER_ADMIN
  CONTENT_MANAGER
  FINANCE_LICENSING
  CREATOR_APPLICATIONS
  BRAND_APPLICATIONS
  CUSTOMER_SERVICE
  OPERATIONS
  CONTRACTOR
}

enum Seniority {
  JUNIOR
  SENIOR
}

enum TwoFactorMethod {
  SMS
  AUTHENTICATOR
  BOTH
}

enum TwoFactorEnforcementType {
  OPTIONAL
  MANDATORY
  ROLE_BASED
}

enum IPType {
  IMAGE
  VIDEO
  AUDIO
  TEXT
  BRAND
  TRADEMARK
}

enum LicenseType {
  EXCLUSIVE
  NON_EXCLUSIVE
  EXCLUSIVE_TERRITORY
}

enum LicenseStatus {
  DRAFT
  PENDING_APPROVAL
  PENDING_SIGNATURE
  ACTIVE
  EXPIRING_SOON
  EXPIRED
  RENEWED
  TERMINATED
  DISPUTED
  CANCELED
  SUSPENDED
}

enum LicenseAmendmentStatus {
  PROPOSED
  APPROVED
  REJECTED
  SUPERSEDED
}

enum LicenseAmendmentType {
  FINANCIAL
  SCOPE
  DATES
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExtensionStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum BillingFrequency {
  ONE_TIME
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum RoyaltyType {
  PERCENTAGE
  FIXED
  TIERED
}

enum RoyaltyPeriod {
  MONTHLY
  QUARTERLY
  ANNUAL
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum EmailEventType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  COMPLAINED
  FAILED
}

enum DigestFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  NEVER
}

enum SuppressionReason {
  BOUNCE
  COMPLAINT
  UNSUBSCRIBE
  MANUAL
}

enum OwnershipType {
  PRIMARY
  CONTRIBUTOR
  DERIVATIVE
  TRANSFERRED
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  THREE_D
  OTHER
}

enum AssetStatus {
  DRAFT
  PROCESSING
  REVIEW
  APPROVED
  PUBLISHED
  REJECTED
  ARCHIVED
}

enum ScanStatus {
  PENDING
  SCANNING
  CLEAN
  INFECTED
  ERROR
}

enum RoyaltyRunStatus {
  DRAFT
  CALCULATED
  LOCKED
  PROCESSING
  COMPLETED
  FAILED
}

enum RoyaltyStatementStatus {
  PENDING
  REVIEWED
  DISPUTED
  RESOLVED
  PAID
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EmailTestStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum ScheduledEmailStatus {
  PENDING
  QUEUED
  SENT
  FAILED
  CANCELLED
}

enum EmailCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum CampaignRecipientStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  UNSUBSCRIBED
  COMPLAINED
}

enum NotificationType {
  LICENSE
  PAYOUT
  ROYALTY
  PROJECT
  SYSTEM
  MESSAGE
  POST_ASSIGNED
  POST_STATUS_CHANGED
  BLOG
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaxDocumentType {
  FORM_1099_NEC
  FORM_1099_MISC
  W8_BEN
  W8_BEN_E
  W9
  FORM_1042_S
  VAT_SUMMARY
  GST_SUMMARY
}

enum TaxFilingStatus {
  PENDING
  GENERATED
  DELIVERED
  FILED
  CORRECTED
  VOIDED
}

enum TaxWithholdingType {
  BACKUP_WITHHOLDING
  INTERNATIONAL_TREATY
  STATE_TAX
  LOCAL_TAX
}

enum FinancialReportType {
  MONTHLY_REVENUE
  QUARTERLY_SUMMARY
  ANNUAL_STATEMENT
  CASH_FLOW_ANALYSIS
  ACCOUNTS_RECEIVABLE_AGING
  ACCOUNTS_PAYABLE
  COMMISSION_TRACKING
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  ARCHIVED
}

enum ReportFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum AgingBucket {
  CURRENT
  DAYS_31_60
  DAYS_61_90
  OVER_90
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PayableStatus {
  PENDING
  APPROVED
  PROCESSING
  PAID
  OVERDUE
  DISPUTED
}

enum PayablePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MetricType {
  COUNT
  SUM
  AVERAGE
  DISTINCT_COUNT
  PERCENTILE
  RATIO
  MAX
  MIN
}

enum MetricVisibility {
  PRIVATE
  TEAM
  ORGANIZATION
  PUBLIC
}

enum MetricPeriodType {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum RealtimeMetricType {
  COUNTER
  GAUGE
  HISTOGRAM
  RATE
}

enum AggregationJobStatus {
  RUNNING
  COMPLETED
  FAILED
  PARTIAL
}

enum CommissionTransactionType {
  LICENSE_FEE
  REVENUE_SHARE
  PLATFORM_FEE
  TRANSACTION_FEE
  LATE_FEE
  OTHER
}

enum CommissionCategory {
  PLATFORM_COMMISSION
  PAYMENT_PROCESSING
  CURRENCY_CONVERSION
  DISPUTE_FEE
  SERVICE_FEE
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  OTHER
}

enum MediaStatus {
  UPLOADING
  PROCESSING
  AVAILABLE
  ERROR
  ARCHIVED
}

enum MediaAccessLevel {
  PUBLIC
  INTERNAL
  ADMIN_ONLY
  RESTRICTED
}

enum MediaVariantType {
  THUMBNAIL
  SMALL
  MEDIUM
  LARGE
  OPTIMIZED
  WEBP
  AVIF
  COMPRESSED
}

enum MediaUsageType {
  VIEW
  DOWNLOAD
  PREVIEW
  COPY_URL
  EMBED
}

enum MediaCollectionType {
  MANUAL
  SMART
  SYSTEM
}

enum MediaVisibility {
  PRIVATE
  SHARED
  PUBLIC
}

enum MediaBulkOperationType {
  DELETE
  MOVE_TO_COLLECTION
  REMOVE_FROM_COLLECTION
  UPDATE_METADATA
  REGENERATE_VARIANTS
  UPDATE_ACCESS_LEVEL
  ARCHIVE
  RESTORE
}

enum MediaBulkOperationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum MediaOperationStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum PostExperimentStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}
