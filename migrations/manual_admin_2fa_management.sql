-- Admin 2FA Management Schema Migration
-- Adds tables and fields needed for administrative 2FA management

-- Add new fields to users table for 2FA policy enforcement
ALTER TABLE users ADD COLUMN IF NOT EXISTS two_factor_required BOOLEAN DEFAULT false;
ALTER TABLE users ADD COLUMN IF NOT EXISTS two_factor_grace_period_ends TIMESTAMP;
ALTER TABLE users ADD COLUMN IF NOT EXISTS two_factor_last_reset_by TEXT;
ALTER TABLE users ADD COLUMN IF NOT EXISTS two_factor_last_reset_at TIMESTAMP;

-- Add indexes for new user fields
CREATE INDEX IF NOT EXISTS idx_users_two_factor_required ON users(two_factor_required);
CREATE INDEX IF NOT EXISTS idx_users_two_factor_grace_period_ends ON users(two_factor_grace_period_ends);

-- Create TwoFactorEnforcementType enum
DO $$ BEGIN
  CREATE TYPE "TwoFactorEnforcementType" AS ENUM ('OPTIONAL', 'MANDATORY', 'ROLE_BASED');
EXCEPTION
  WHEN duplicate_object THEN null;
END $$;

-- Create two_factor_policies table
CREATE TABLE IF NOT EXISTS two_factor_policies (
  id TEXT PRIMARY KEY,
  role "UserRole" NOT NULL UNIQUE,
  enforcement_type "TwoFactorEnforcementType" DEFAULT 'OPTIONAL' NOT NULL,
  grace_period_days INTEGER DEFAULT 30 NOT NULL,
  enforcement_start_date TIMESTAMP,
  allowed_methods "TwoFactorMethod"[] DEFAULT '{}',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  created_by TEXT,
  updated_by TEXT
);

-- Create indexes for two_factor_policies
CREATE INDEX IF NOT EXISTS idx_two_factor_policies_role ON two_factor_policies(role);
CREATE INDEX IF NOT EXISTS idx_two_factor_policies_enforcement_type ON two_factor_policies(enforcement_type);

-- Create admin_emergency_codes table
CREATE TABLE IF NOT EXISTS admin_emergency_codes (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  code_hash TEXT NOT NULL,
  generated_by TEXT NOT NULL,
  reason TEXT,
  used BOOLEAN DEFAULT false NOT NULL,
  used_at TIMESTAMP,
  expires_at TIMESTAMP NOT NULL,
  ip_address TEXT,
  user_agent TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create indexes for admin_emergency_codes
CREATE INDEX IF NOT EXISTS idx_admin_emergency_codes_user_id ON admin_emergency_codes(user_id);
CREATE INDEX IF NOT EXISTS idx_admin_emergency_codes_user_id_used ON admin_emergency_codes(user_id, used);
CREATE INDEX IF NOT EXISTS idx_admin_emergency_codes_expires_at ON admin_emergency_codes(expires_at);
CREATE INDEX IF NOT EXISTS idx_admin_emergency_codes_generated_by ON admin_emergency_codes(generated_by);

-- Create two_factor_security_logs table
CREATE TABLE IF NOT EXISTS two_factor_security_logs (
  id TEXT PRIMARY KEY,
  user_id TEXT NOT NULL,
  admin_id TEXT,
  event_type TEXT NOT NULL,
  action TEXT NOT NULL,
  success BOOLEAN DEFAULT true NOT NULL,
  failure_reason TEXT,
  metadata JSONB,
  ip_address TEXT,
  user_agent TEXT,
  device_info TEXT,
  location_country TEXT,
  location_city TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Create indexes for two_factor_security_logs
CREATE INDEX IF NOT EXISTS idx_two_factor_security_logs_user_id_created_at ON two_factor_security_logs(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_two_factor_security_logs_admin_id_created_at ON two_factor_security_logs(admin_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_two_factor_security_logs_event_type_created_at ON two_factor_security_logs(event_type, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_two_factor_security_logs_action_created_at ON two_factor_security_logs(action, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_two_factor_security_logs_created_at ON two_factor_security_logs(created_at DESC);

-- Grant appropriate permissions (adjust based on your database user)
-- GRANT ALL ON two_factor_policies TO your_db_user;
-- GRANT ALL ON admin_emergency_codes TO your_db_user;
-- GRANT ALL ON two_factor_security_logs TO your_db_user;

-- Add comment for documentation
COMMENT ON TABLE two_factor_policies IS 'Defines 2FA enforcement rules for each user role';
COMMENT ON TABLE admin_emergency_codes IS 'Emergency access codes generated by admins for locked-out users';
COMMENT ON TABLE two_factor_security_logs IS 'Comprehensive audit log for all 2FA-related admin actions and events';

COMMENT ON COLUMN users.two_factor_required IS 'Whether 2FA is required for this user based on their role policy';
COMMENT ON COLUMN users.two_factor_grace_period_ends IS 'Date when the grace period for enabling 2FA ends';
COMMENT ON COLUMN users.two_factor_last_reset_by IS 'Admin ID who last reset this user''s 2FA';
COMMENT ON COLUMN users.two_factor_last_reset_at IS 'Timestamp when 2FA was last reset by an admin';
